{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/util/util.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/util/dom-events.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/util/viewport-size.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/slide/pan-bounds.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/slide/zoom-level.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/slide/slide.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/gestures/drag-handler.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/gestures/zoom-handler.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/gestures/tap-handler.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/gestures/gestures.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/main-scroll.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/keyboard.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/util/css-animation.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/util/spring-easer.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/util/spring-animation.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/util/animations.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/scroll-wheel.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/ui/ui-element.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/ui/button-arrow.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/ui/button-close.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/ui/button-zoom.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/ui/loading-indicator.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/ui/counter-indicator.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/ui/ui.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/slide/get-thumb-bounds.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/core/eventable.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/slide/placeholder.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/slide/content.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/slide/loader.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/core/base.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/opener.js", "../../../node_modules/.pnpm/photoswipe@5.4.3/src/js/photoswipe.js"],
  "sourcesContent": ["/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n", "// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  /* @ts-ignore */\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n", "/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n", "import { clamp } from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {Record<Axis, number>} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n    this.currZoomLevel = 1;\r\n    this.center = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.max = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.min = /** @type {Point} */ { x: 0, y: 0 };\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By default, it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n", "const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n", "/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement} [element] thumbnail element\r\n * @prop {string} [src] image URL\r\n * @prop {string} [srcset] image srcset\r\n * @prop {number} [w] image width (deprecated)\r\n * @prop {number} [h] image height (deprecated)\r\n * @prop {number} [width] image width\r\n * @prop {number} [height] image height\r\n * @prop {string} [msrc] placeholder image URL that's displayed before large image is loaded\r\n * @prop {string} [alt] image alt text\r\n * @prop {boolean} [thumbCropped] whether thumbnail is cropped client-side or not\r\n * @prop {string} [html] html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.pan = { x: 0, y: 0 };\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap', 'div');\r\n    /** @type {HTMLElement | null} */\r\n    this.holderElement = null;\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n    this.heavyAppended = false;\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load(false);\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\r\n  getPlaceholderElement() {\r\n    return this.content.placeholder?.element;\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    if (!prevZoomLevel) {\r\n      prevZoomLevel = this.zoomLevels.initial;\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\r\n  isPannable() {\r\n    return Boolean(this.width) && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\r\n  isZoomable() {\r\n    return Boolean(this.width) && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  /** @returns {string} */\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n", "import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = { x: 0, y: 0 };\r\n  }\r\n\r\n  start() {\r\n    if (this.pswp.currSlide) {\r\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    }\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && this.pswp.options.closeOnVerticalDrag\r\n        && (currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit)\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!this.pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        this.pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        if (currSlide) {\r\n          roundPoint(currSlide.pan);\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { velocity } = this.gestures;\r\n    const { mainScroll, currSlide } = this.pswp;\r\n    let indexDiff = 0;\r\n\r\n    this.pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is visible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / this.pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched,\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if ((currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max)\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { velocity } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (this.pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Increasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        this.pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = this.pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    this.pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          this.pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = this.pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta || !currSlide) {\r\n      return false;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (this.pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - (this.pswp.currSlide?.bounds.center.y ?? 0)) / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n", "import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startPan = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startZoomPoint = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._zoomPoint = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._wasOverFitZoomLevel = false;\r\n    /** @private */\r\n    this._startZoomLevel = 1;\r\n  }\r\n\r\n  start() {\r\n    const { currSlide } = this.gestures.pswp;\r\n    if (currSlide) {\r\n      this._startZoomLevel = currSlide.currZoomLevel;\r\n      equalizePoints(this._startPan, currSlide.pan);\r\n    }\r\n\r\n    this.gestures.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial)\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide?.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === 0) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({ x: 0, y: 0 }, currSlide.pan);\r\n    let destinationPan = equalizePoints({ x: 0, y: 0 }, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n", "/**\r\n * @template {string} T\r\n * @template {string} P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide?.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide?.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element?.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n", "import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y' | null} */\r\n    this.dragAxis = null;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = { x: 0, y: 0 }; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = { x: 0, y: 0 }; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.prevP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.velocity = { x: 0, y: 0 };\r\n\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._lastStartP1 = { x: 0, y: 0 };\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._intervalP1 = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]}\r\n     * @private\r\n     */\r\n    this._ongoingPointers = [];\r\n    /** @private */\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    /** @private */\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @private */\r\n    this._intervalTime = 0;\r\n    /** @private */\r\n    this._velocityCalculated = false;\r\n    this.isMultitouch = false;\r\n    this.isDragging = false;\r\n    this.isZooming = false;\r\n    /** @type {number | null} */\r\n    this.raf = null;\r\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\r\n    this._tapTimer = null;\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(\r\n        pswp.scrollWrap,\r\n        'click',\r\n        /** @type EventListener */(this._onClick.bind(this))\r\n      );\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        if (pswp.scrollWrap) {\r\n          pswp.scrollWrap.ontouchmove = () => {};\r\n          pswp.scrollWrap.ontouchend = () => {};\r\n        }\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(\r\n      pswp.scrollWrap,\r\n      pref + down,\r\n      /** @type EventListener */(this.onPointerDown.bind(this))\r\n    );\r\n    events.add(window, pref + 'move', /** @type EventListener */(this.onPointerMove.bind(this)));\r\n    events.add(window, pref + up, /** @type EventListener */(this.onPointerUp.bind(this)));\r\n    if (cancelEvent) {\r\n      events.add(\r\n        pswp.scrollWrap,\r\n        cancelEvent,\r\n        /** @type EventListener */(this.onPointerUp.bind(this))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse';\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e, 'down');\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    this._preventPointerEventBehaviour(e, 'move');\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _preventPointerEventBehaviour(e, pointerType) {\r\n    const preventPointerEvent = this.pswp.applyFilters('preventPointerEvent', true, e, pointerType);\r\n    if (preventPointerEvent) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPointer) => {\r\n        return ongoingPointer.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, { x: 0, y: 0 }));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  /** update points at the start of gesture\r\n   * @private\r\n   */\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  /** @private */\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n", "import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n    this.slideWidth = 0;\r\n    /** @private */\r\n    this._currPositionIndex = 0;\r\n    /** @private */\r\n    this._prevPositionIndex = 0;\r\n    /** @private */\r\n    this._containerShiftIndex = -1;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = [];\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', 'div', this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    return Boolean(diff);\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    /** @type {ItemHolder | undefined} */\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        if (tempHolder) {\r\n          this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n          this._containerShiftIndex++;\r\n\r\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n        }\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        if (tempHolder) {\r\n          this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n          this._containerShiftIndex--;\r\n\r\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1]?.slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\r\n  moveTo(x, dragging) {\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      let newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      const delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n\r\n    if (this.pswp.container) {\r\n      setTransform(this.pswp.container, x);\r\n    }\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging: dragging ?? false });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n", "import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\nconst KeyboardKeyCodesMap = {\r\n  Escape: 27,\r\n  z: 90,\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n  Tab: 9,\r\n};\r\n\r\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\r\nconst getKeyboardEventKey = (key, isKeySupported) => {\r\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\r\n};\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    /** @private */\r\n    this._wasFocused = false;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      if (pswp.options.trapFocus) {\r\n        // Dialog was likely opened by keyboard if initial point is not defined\r\n        if (!pswp.options.initialPointerPos) {\r\n          // focus causes layout,\r\n          // which causes lag during the animation,\r\n          // that's why we delay it until the opener transition ends\r\n          this._focusRoot();\r\n        }\r\n\r\n        pswp.events.add(\r\n          document,\r\n          'focusin',\r\n          /** @type EventListener */(this._onFocusIn.bind(this))\r\n        );\r\n      }\r\n\r\n      pswp.events.add(document, 'keydown', /** @type EventListener */(this._onKeyDown.bind(this)));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @private */\r\n  _focusRoot() {\r\n    if (!this._wasFocused && this.pswp.element) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe> | undefined} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y' | undefined} */\r\n    let axis;\r\n    let isForward = false;\r\n    const isKeySupported = 'key' in e;\r\n\r\n    switch (isKeySupported ? e.key : e.keyCode) {\r\n      case getKeyboardEventKey('Escape', isKeySupported):\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case getKeyboardEventKey('z', isKeySupported):\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\r\n        axis = 'x';\r\n        break;\r\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('Tab', isKeySupported):\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      // @ts-ignore\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (template\r\n        && document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n", "import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish = () => {},\r\n      duration = 333,\r\n      easing = DEFAULT_EASING,\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop] ?? '';\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n    /** @private */\r\n    this._finished = false;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transition won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element property was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n", "const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    this._dampedFrequency = this._naturalFrequency;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n", "import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    this._raf = 0;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish = () => {},\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = 0;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n", "import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\r\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\r\n\r\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\r\n  _start(props, isSpring) {\r\n    const animation = isSpring\r\n      ? new SpringAnimation(/** @type SpringAnimationProps */ (props))\r\n      : new CSSAnimation(/** @type CssAnimationProps */ (props));\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n", "/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', /** @type EventListener */(this._onWheel.bind(this)));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n", "import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    /** @type {HTMLElement} */\r\n    const element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      const ariaText = ariaLabel || title;\r\n      if (ariaText) {\r\n        element.setAttribute('aria-label', ariaText);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          // @ts-ignore\r\n          pswp[data.onClick]();\r\n        } else if (typeof data.onClick === 'function') {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    /** @type {HTMLElement | undefined} root element by default */\r\n    let container = pswp.element;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      }\r\n    }\r\n\r\n    container?.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n", "/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n", "/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n", "/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n", "/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean | undefined} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout | null} */\r\n    let delayTimeout = null;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide?.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(Boolean(pswp.currSlide?.content.isLoading()));\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    if (pswp.ui) {\r\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n    }\r\n  }\r\n};\r\n", "/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n", "import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [];\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = () => {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element?.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n\r\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\r\n      return;\r\n    }\r\n\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n", "/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  /** @type {Bounds | undefined} */\r\n  let thumbBounds;\r\n  /** @type {HTMLElement | null | undefined} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : /** @type {HTMLElement | null} */ (element.querySelector(thumbSelector));\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w || 0,\r\n        itemData.height || itemData.h || 0\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n", "/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n", "import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n", "import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n", "import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n", "import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n", "import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this.isOpen = false;\r\n    this.isClosing = false;\r\n    this.isOpening = false;\r\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\r\n    this._duration = undefined;\r\n    /** @private */\r\n    this._useAnimation = false;\r\n    /** @private */\r\n    this._croppedZoom = false;\r\n    /** @private */\r\n    this._animateRootOpacity = false;\r\n    /** @private */\r\n    this._animateBgOpacity = false;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\r\n    this._placeholder = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._opacityElement = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._cropContainer1 = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\r\n    this._cropContainer2 = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\r\n    this._thumbBounds = undefined;\r\n\r\n\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n  }\r\n\r\n  /** @private */\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = undefined;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = undefined;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide?.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && slide?.content.usePlaceholder()\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening && slide) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity ?? false;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide?.holderElement;\r\n\r\n      if (pswp.container) {\r\n        pswp.container.style.overflow = 'hidden';\r\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n      }\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity && pswp.bg) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = '1';\r\n        }\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      if (pswp.mainScroll.itemHolders[0]) {\r\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      }\r\n      if (pswp.mainScroll.itemHolders[2]) {\r\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n      }\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve(true);\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve(true);\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _initiate() {\r\n    this.pswp.element?.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element?.classList.toggle('pswp--ui-visible', this.isOpening);\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom && pswp.container) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide?.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      if (pswp.currSlide) {\r\n        pswp.currSlide.zoomAndPanToInitial();\r\n        this._animateTo(\r\n          pswp.currSlide.container,\r\n          'transform',\r\n          pswp.currSlide.getCurrentTransform()\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._animateBgOpacity && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    // do not animate opacity if it's already at 0\r\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    if (currSlide) {\r\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n      if (animate) {\r\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n      } else {\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n", "import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\r\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} trapFocus\r\n * Trap focus within PhotoSwipe element while it's open.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PreparedPhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  trapFocus: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.options = this._prepareOptions(options || {});\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.offset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.viewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     */\r\n    this.bgOpacity = 1;\r\n    this.currIndex = 0;\r\n    this.potentialIndex = 0;\r\n    this.isOpen = false;\r\n    this.isDestroying = false;\r\n    this.hasMouse = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\r\n    this._initialItemData = {};\r\n    /** @type {Bounds | undefined} */\r\n    this._initialThumbBounds = undefined;\r\n\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.topBar = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.template = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.container = undefined;\r\n    /** @type {HTMLElement | undefined} */\r\n    this.scrollWrap = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.currSlide = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n    this.animations = new Animations();\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  /** @returns {boolean} */\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return false;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    if (this.element) {\r\n      this.element.className += ' ' + rootClasses;\r\n    }\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      const { itemHolders } = this.mainScroll;\r\n\r\n      // Add content to the previous and next slide\r\n      if (itemHolders[0]) {\r\n        itemHolders[0].el.style.display = 'block';\r\n        this.setContent(itemHolders[0], this.currIndex - 1);\r\n      }\r\n      if (itemHolders[2]) {\r\n        itemHolders[2].el.style.display = 'block';\r\n        this.setContent(itemHolders[2], this.currIndex + 1);\r\n      }\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    if (this.mainScroll.itemHolders[1]) {\r\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    }\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    return clamp(index, 0, numSlides - 1);\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.appendHeavy();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide?.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide?.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this._listeners = {};\r\n\r\n    if (this.scrollWrap) {\r\n      this.scrollWrap.ontouchmove = null;\r\n      this.scrollWrap.ontouchend = null;\r\n    }\r\n\r\n    this.element?.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.destroy();\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = (this.currSlide?.index ?? 0) - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide?.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = undefined;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  /** @returns {Point} */\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    if (this.bg) {\r\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element?.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp', 'div');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', 'div', this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', 'div', this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PreparedPhotoSwipeOptions} */\r\n    return {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n"],
  "mappings": "AASO,SAASA,EAAcC,EAAWC,EAASC,EAAY,CAC5D,IAAMC,EAAKC,SAASL,cAAcE,CAAvB,EACX,OAAID,IACFG,EAAGH,UAAYA,GAEbE,GACFA,EAAWG,YAAYF,CAAvB,EAEKA,CACR,CAOM,SAASG,EAAeC,EAAIC,EAAI,CACrCD,OAAAA,EAAGE,EAAID,EAAGC,EACVF,EAAGG,EAAIF,EAAGE,EACNF,EAAGG,KAAOC,SACZL,EAAGI,GAAKH,EAAGG,IAENJ,CACR,CAKM,SAASM,GAAWC,EAAG,CAC5BA,EAAEL,EAAIM,KAAKC,MAAMF,EAAEL,CAAb,EACNK,EAAEJ,EAAIK,KAAKC,MAAMF,EAAEJ,CAAb,CACP,CASM,SAASO,EAAmBV,EAAIC,EAAI,CACzC,IAAMC,EAAIM,KAAKG,IAAIX,EAAGE,EAAID,EAAGC,CAAnB,EACJC,EAAIK,KAAKG,IAAIX,EAAGG,EAAIF,EAAGE,CAAnB,EACV,OAAOK,KAAKI,KAAMV,EAAIA,EAAMC,EAAIA,CAAzB,CACR,CASM,SAASU,EAAYb,EAAIC,EAAI,CAClC,OAAOD,EAAGE,IAAMD,EAAGC,GAAKF,EAAGG,IAAMF,EAAGE,CACrC,CAUM,SAASW,EAAMC,EAAKC,EAAKC,EAAK,CACnC,OAAOT,KAAKQ,IAAIR,KAAKS,IAAIF,EAAKC,CAAd,EAAoBC,CAA7B,CACR,CAUM,SAASC,EAAkBhB,EAAGC,EAAGgB,EAAO,CAC7C,IAAIC,EAAa,eAAclB,CAAE,MAAKC,GAAK,CAAE,QAE7C,OAAIgB,IAAUd,SACZe,GAAc,YAAWD,CAAM,IAAGA,CAAM,OAGnCC,CACR,CAUM,SAASC,EAAazB,EAAIM,EAAGC,EAAGgB,EAAO,CAC5CvB,EAAG0B,MAAMC,UAAYL,EAAkBhB,EAAGC,EAAGgB,CAAP,CACvC,CAED,IAAMK,GAAmB,2BAUlB,SAASC,GAAmB7B,EAAI8B,EAAMC,EAAUC,EAAM,CAI3DhC,EAAG0B,MAAMO,WAAaH,EACjB,GAAEA,CAAK,IAAGC,CAAS,MAAKC,GAAQJ,EAAiB,GAClD,MACL,CASM,SAASM,EAAelC,EAAImC,EAAGC,EAAG,CACvCpC,EAAG0B,MAAMW,MAAS,OAAOF,GAAM,SAAa,GAAEA,CAAE,KAAMA,EACtDnC,EAAG0B,MAAMY,OAAU,OAAOF,GAAM,SAAa,GAAEA,CAAE,KAAMA,CACxD,CAKM,SAASG,GAAsBvC,EAAI,CACxC6B,GAAmB7B,CAAD,CACnB,CAMM,SAASwC,GAAYC,EAAK,CAC/B,MAAI,WAAYA,EACPA,EAAIC,OAAJ,EAAaC,MAAM,IAAM,CAAA,CAAzB,EAGLF,EAAIG,SACCC,QAAQC,QAAQL,CAAhB,EAGF,IAAII,QAAQ,CAACC,EAASC,IAAW,CACtCN,EAAIO,OAAS,IAAMF,EAAQL,CAAD,EAC1BA,EAAIQ,QAAUF,CACf,CAHM,CAIR,CAIM,IAAMG,EAAa,CACxBC,KAAM,OACNC,QAAS,UACTC,OAAQ,SACRC,MAAO,OAJiB,EAenB,SAASC,GAAeC,EAAG,CAChC,MAAQ,WAAYA,GAAKA,EAAEC,SAAW,GAAMD,EAAEE,SAAWF,EAAEG,SAAWH,EAAEI,QAAUJ,EAAEK,QACrF,CAUM,SAASC,GAAsBC,EAAQC,EAAgBC,EAAShE,SAAU,CAE/E,IAAIiE,EAAW,CAAA,EAEf,GAAIH,aAAkBI,QACpBD,EAAW,CAACH,CAAD,UACFA,aAAkBK,UAAYC,MAAMC,QAAQP,CAAd,EACvCG,EAAWG,MAAME,KAAKR,CAAX,MACN,CACL,IAAMS,EAAW,OAAOT,GAAW,SAAWA,EAASC,EACnDQ,IACFN,EAAWG,MAAME,KAAKN,EAAOQ,iBAAiBD,CAAxB,CAAX,EAEd,CAED,OAAON,CACR,CAmBM,SAASQ,GAAW,CACzB,MAAO,CAAC,EAAEC,UAAUC,QAAUD,UAAUC,OAAOC,MAAM,QAAvB,EAC/B,CCtOD,IAAIC,GAAkB,GAEtB,GAAI,CAEFC,OAAOC,iBAAiB,OAAQ,KAAMC,OAAOC,eAAe,CAAA,EAAI,UAAW,CACzEC,IAAK,IAAM,CACTL,GAAkB,EACnB,CAHwE,CAArC,CAAtC,CAKD,MAAW,CAAA,CAWZ,IAAMM,EAAN,KAAgB,CACdC,aAAc,CAKZ,KAAKC,MAAQ,CAAA,CACd,CAUDC,IAAIC,EAAQC,EAAMC,EAAUC,EAAS,CACnC,KAAKC,gBAAgBJ,EAAQC,EAAMC,EAAUC,CAA7C,CACD,CAUDE,OAAOL,EAAQC,EAAMC,EAAUC,EAAS,CACtC,KAAKC,gBAAgBJ,EAAQC,EAAMC,EAAUC,EAAS,EAAtD,CACD,CAKDG,WAAY,CACV,KAAKR,MAAMS,QAASC,GAAa,CAC/B,KAAKJ,gBACHI,EAASR,OACTQ,EAASP,KACTO,EAASN,SACTM,EAASL,QACT,GACA,EANF,EADF,EAUA,KAAKL,MAAQ,CAAA,CACd,CAaDM,gBAAgBJ,EAAQC,EAAMC,EAAUC,EAASM,EAAQC,EAAU,CACjE,GAAI,CAACV,EACH,OAGF,IAAMW,EAAaF,EAAS,sBAAwB,mBACtCR,EAAKW,MAAM,GAAX,EACRL,QAASM,GAAU,CACvB,GAAIA,EAAO,CAGJH,IACCD,EAEF,KAAKX,MAAQ,KAAKA,MAAMgB,OAAQN,GACvBA,EAASP,OAASY,GACpBL,EAASN,WAAaA,GACtBM,EAASR,SAAWA,CAHd,EAOb,KAAKF,MAAMiB,KAAK,CACdf,OAAAA,EACAC,KAAMY,EACNX,SAAAA,EACAC,QAAAA,EAJF,GAWJ,IAAMa,EAAe1B,GAAkB,CAAEa,QAAUA,GAAW,EAAvB,EAAkC,GAEzEH,EAAOW,CAAD,EACJE,EACAX,EACAc,CAHF,CAKD,EAhCH,CAkCD,CAtGa,ECXT,SAASC,GAAgBC,EAASC,EAAM,CAC7C,GAAID,EAAQE,kBAAmB,CAC7B,IAAMC,EAAkBH,EAAQE,kBAAkBF,EAASC,CAAnC,EACxB,GAAIE,EACF,OAAOA,CAEV,CAED,MAAO,CACLvG,EAAGL,SAAS6G,gBAAgBC,YAM5BxG,EAAGwE,OAAOiC,YAEb,CAqCM,SAASC,EAAmBnF,EAAM4E,EAASQ,EAAcC,EAAUC,EAAO,CAC/E,IAAIC,EAAe,EAEnB,GAAIX,EAAQY,UACVD,EAAeX,EAAQY,UAAUJ,EAAcC,EAAUC,CAA1C,EAAiDtF,CAAjD,UACN4E,EAAQa,QACjBF,EAAeX,EAAQa,QAAQzF,CAAhB,MACV,CACL,IAAM0F,EAAiB,UAAY1F,EAAK,CAAD,EAAI2F,YAAR,EAAwB3F,EAAK4F,MAAM,CAAX,EAEvDhB,EAAQc,CAAD,IAETH,EAAeX,EAAQc,CAAD,EAEzB,CAED,OAAOG,OAAON,CAAD,GAAkB,CAChC,CASM,SAASO,GAAelB,EAASQ,EAAcC,EAAUC,EAAO,CACrE,MAAO,CACL9G,EAAG4G,EAAa5G,EACZ2G,EAAmB,OAAQP,EAASQ,EAAcC,EAAUC,CAA1C,EAClBH,EAAmB,QAASP,EAASQ,EAAcC,EAAUC,CAA3C,EACtB7G,EAAG2G,EAAa3G,EACZ0G,EAAmB,MAAOP,EAASQ,EAAcC,EAAUC,CAAzC,EAClBH,EAAmB,SAAUP,EAASQ,EAAcC,EAAUC,CAA5C,EAEzB,CCzFD,IAAMS,EAAN,KAAgB,CAIdxC,YAAYyC,EAAO,CACjB,KAAKA,MAAQA,EACb,KAAKC,cAAgB,EACrB,KAAKC,OAA8B,CAAE1H,EAAG,EAAGC,EAAG,GAC9C,KAAKc,IAA2B,CAAEf,EAAG,EAAGC,EAAG,GAC3C,KAAKa,IAA2B,CAAEd,EAAG,EAAGC,EAAG,EAC5C,CAOD0H,OAAOF,EAAe,CACpB,KAAKA,cAAgBA,EAEhB,KAAKD,MAAMzF,OAGd,KAAK6F,YAAY,GAAjB,EACA,KAAKA,YAAY,GAAjB,EACA,KAAKJ,MAAMnB,KAAKwB,SAAS,aAAc,CAAEL,MAAO,KAAKA,MAArD,GAJA,KAAKM,MAAL,CAMH,CAODF,YAAYG,EAAM,CAChB,GAAM,CAAE1B,KAAAA,CAAF,EAAW,KAAKmB,MAChBQ,EAAS,KAAKR,MAAMO,IAAS,IAAM,QAAU,QAApC,EAAgD,KAAKN,cAE9DR,EAAUN,EADIoB,IAAS,IAAM,OAAS,MAG1C1B,EAAKD,QACLC,EAAKO,aACL,KAAKY,MAAMS,KACX,KAAKT,MAAMV,KALqB,EAQ5BoB,EAAc,KAAKV,MAAMU,YAAYH,CAAvB,EAIpB,KAAKL,OAAOK,CAAZ,EAAoBzH,KAAKC,OAAO2H,EAAcF,GAAU,CAApC,EAAyCf,EAG7D,KAAKlG,IAAIgH,CAAT,EAAkBC,EAASE,EACvB5H,KAAKC,MAAM2H,EAAcF,CAAzB,EAAmCf,EACnC,KAAKS,OAAOK,CAAZ,EAGJ,KAAKjH,IAAIiH,CAAT,EAAkBC,EAASE,EACvBjB,EACA,KAAKS,OAAOK,CAAZ,CACL,CAGDD,OAAQ,CACN,KAAKJ,OAAO1H,EAAI,EAChB,KAAK0H,OAAOzH,EAAI,EAChB,KAAKc,IAAIf,EAAI,EACb,KAAKe,IAAId,EAAI,EACb,KAAKa,IAAId,EAAI,EACb,KAAKc,IAAIb,EAAI,CACd,CASDkI,WAAWJ,EAAMK,EAAW,CAC1B,OAAOxH,EAAMwH,EAAW,KAAKrH,IAAIgH,CAAT,EAAgB,KAAKjH,IAAIiH,CAAT,CAA5B,CACb,CAlFa,ECVVM,EAAkB,IAalBC,EAAN,KAAgB,CAOdvD,YAAYqB,EAASS,EAAUC,EAAOT,EAAM,CAC1C,KAAKA,KAAOA,EACZ,KAAKD,QAAUA,EACf,KAAKS,SAAWA,EAChB,KAAKC,MAAQA,EAEb,KAAKoB,YAAc,KAEnB,KAAKK,YAAc,KACnB,KAAKC,IAAM,EACX,KAAKC,KAAO,EACZ,KAAKC,MAAQ,EACb,KAAKC,QAAU,EACf,KAAKC,UAAY,EACjB,KAAK7H,IAAM,EACX,KAAKD,IAAM,CACZ,CAWD6G,OAAOkB,EAAUC,EAAWZ,EAAa,CAEvC,IAAMK,EAAc,CAAEvI,EAAG6I,EAAU5I,EAAG6I,GACtC,KAAKP,YAAcA,EACnB,KAAKL,YAAcA,EAEnB,IAAMa,EAASb,EAAYlI,EAAIuI,EAAYvI,EACrCgJ,EAASd,EAAYjI,EAAIsI,EAAYtI,EAE3C,KAAKuI,IAAMlI,KAAKQ,IAAI,EAAGiI,EAASC,EAASD,EAASC,CAAvC,EACX,KAAKP,KAAOnI,KAAKQ,IAAI,EAAGiI,EAASC,EAASD,EAASC,CAAvC,EAIZ,KAAKN,MAAQpI,KAAKQ,IAAI,EAAGkI,CAAZ,EAEb,KAAKL,QAAU,KAAKM,YAAL,EACf,KAAKL,UAAY,KAAKM,cAAL,EACjB,KAAKnI,IAAMT,KAAKS,IACd,KAAK4H,QACL,KAAKC,UACL,KAAKO,QAAL,CAHS,EAMX,KAAKrI,IAAMR,KAAKQ,IACd,KAAK0H,IACL,KAAKG,QACL,KAAKC,SAHI,EAMP,KAAKvC,MACP,KAAKA,KAAKwB,SAAS,mBAAoB,CAAEuB,WAAY,KAAMC,UAAW,KAAKxC,SAA3E,CAEH,CASDyC,sBAAsBC,EAAc,CAClC,IAAMC,EACJD,EAAe,YAEXE,EAAc,KAAKrD,QAAQoD,CAAb,EAEpB,GAAKC,EAIL,OAAI,OAAOA,GAAgB,WAClBA,EAAY,IAAD,EAGhBA,IAAgB,OACX,KAAKhB,KAGVgB,IAAgB,MACX,KAAKjB,IAGPnB,OAAOoC,CAAD,CACd,CAWDP,eAAgB,CACd,IAAIzB,EAAgB,KAAK6B,sBAAsB,WAA3B,EAEpB,OAAI7B,IAKJA,EAAgBnH,KAAKQ,IAAI,EAAG,KAAK0H,IAAM,CAAvB,EAEZ,KAAKD,aAAed,EAAgB,KAAKc,YAAYvI,EAAIqI,IAC3DZ,EAAgBY,EAAkB,KAAKE,YAAYvI,GAG9CyH,EACR,CAQDwB,aAAc,CACZ,OAAO,KAAKK,sBAAsB,SAA3B,GAAyC,KAAKd,GACtD,CAUDW,SAAU,CAGR,OAAO,KAAKG,sBAAsB,KAA3B,GAAqChJ,KAAKS,IAAI,EAAG,KAAKyH,IAAM,CAAvB,CAC7C,CArJa,ECuBVkB,EAAN,KAAY,CAMV3E,YAAYkD,EAAMnB,EAAOT,EAAM,CAC7B,KAAK4B,KAAOA,EACZ,KAAKnB,MAAQA,EACb,KAAKT,KAAOA,EACZ,KAAKsD,SAAY7C,IAAUT,EAAKuD,UAChC,KAAKC,kBAAoB,EAEzB,KAAK3B,YAAc,CAAElI,EAAG,EAAGC,EAAG,GAE9B,KAAK6J,IAAM,CAAE9J,EAAG,EAAGC,EAAG,GAEtB,KAAK8J,aAAgB,KAAKJ,UAAY,CAACtD,EAAK2D,OAAOC,OAEnD,KAAKb,WAAa,IAAId,EAAUjC,EAAKD,QAAS6B,EAAMnB,EAAOT,CAAzC,EAElB,KAAKA,KAAKwB,SAAS,cAAe,CAChCL,MAAO,KACPS,KAAM,KAAKA,KACXnB,MAAAA,EAHF,EAMA,KAAKoD,QAAU,KAAK7D,KAAK8D,cAAcC,kBAAkB,IAA1C,EACf,KAAKC,UAAY/K,EAAc,kBAAmB,KAApB,EAE9B,KAAKgL,cAAgB,KAErB,KAAK7C,cAAgB,EAErB,KAAK1F,MAAQ,KAAKmI,QAAQnI,MAE1B,KAAKC,OAAS,KAAKkI,QAAQlI,OAC3B,KAAKuI,cAAgB,GACrB,KAAKC,OAAS,IAAIjD,EAAU,IAAd,EAEd,KAAKkD,mBAAqB,GAC1B,KAAKC,oBAAsB,GAE3B,KAAKrE,KAAKwB,SAAS,YAAa,CAAEL,MAAO,KAAzC,CACD,CAODmD,YAAYhB,EAAU,CAChBA,GAAY,CAAC,KAAKA,SAEpB,KAAKiB,SAAL,EACS,CAACjB,GAAY,KAAKA,UAE3B,KAAKkB,WAAL,CAEH,CAODC,OAAOR,EAAe,CACpB,KAAKA,cAAgBA,EAErB,KAAKD,UAAUjJ,MAAM2J,gBAAkB,MAGlC,KAAK9C,OAIV,KAAK+C,cAAL,EAEA,KAAKC,KAAL,EACA,KAAKC,kBAAL,EACA,KAAKC,YAAL,EAEA,KAAKb,cAAc1K,YAAY,KAAKyK,SAApC,EAEA,KAAKe,oBAAL,EAEA,KAAK/E,KAAKwB,SAAS,eAAgB,CAAEL,MAAO,KAA5C,EAEA,KAAK6D,oBAAL,EAEA,KAAKhF,KAAKwB,SAAS,kBAAmB,CAAEL,MAAO,KAA/C,EAEI,KAAKmC,UACP,KAAKiB,SAAL,EAEH,CAEDK,MAAO,CACL,KAAKf,QAAQe,KAAK,EAAlB,EACA,KAAK5E,KAAKwB,SAAS,YAAa,CAAEL,MAAO,KAAzC,CACD,CAQD2D,aAAc,CACZ,GAAM,CAAE9E,KAAAA,CAAF,EAAW,KACXiF,EAAoB,GAGtB,KAAKf,eACF,CAAClE,EAAK2D,OAAOC,QACb5D,EAAKkF,WAAWC,UAAhB,GACC,CAAC,KAAK7B,UAAY,CAAC2B,GAIvB,KAAKjF,KAAKwB,SAAS,cAAe,CAAEL,MAAO,KAA3C,EAAmDiE,mBAIvD,KAAKlB,cAAgB,GAErB,KAAKL,QAAQY,OAAb,EAEA,KAAKzE,KAAKwB,SAAS,qBAAsB,CAAEL,MAAO,KAAlD,EACD,CAQDoD,UAAW,CACT,KAAKjB,SAAW,GAChB,KAAKwB,YAAL,EACA,KAAKjB,QAAQU,SAAb,EACA,KAAKvE,KAAKwB,SAAS,gBAAiB,CAAEL,MAAO,KAA7C,CACD,CAODqD,YAAa,CACX,KAAKlB,SAAW,GAChB,KAAKO,QAAQW,WAAb,EAEI,KAAKpD,gBAAkB,KAAK2B,WAAWT,SAEzC,KAAKqC,cAAL,EAIF,KAAKnB,kBAAoB,EACzB,KAAKuB,oBAAL,EACA,KAAKC,oBAAL,EACA,KAAKH,kBAAL,EAEA,KAAK7E,KAAKwB,SAAS,kBAAmB,CAAEL,MAAO,KAA/C,CACD,CAMDkE,SAAU,CACR,KAAKxB,QAAQyB,SAAW,GACxB,KAAKzB,QAAQ3E,OAAb,EACA,KAAK8E,UAAU9E,OAAf,EACA,KAAKc,KAAKwB,SAAS,eAAgB,CAAEL,MAAO,KAA5C,CACD,CAEDoE,QAAS,CACH,KAAKnE,gBAAkB,KAAK2B,WAAWT,SAAW,CAAC,KAAKgB,UAK1D,KAAKqB,cAAL,EACA,KAAKnB,kBAAoB,EACzB,KAAKuB,oBAAL,EACA,KAAKC,oBAAL,EACA,KAAKH,kBAAL,IAGA,KAAKF,cAAL,EACA,KAAKR,OAAO7C,OAAO,KAAKF,aAAxB,EACA,KAAKoE,MAAM,KAAK/B,IAAI9J,EAAG,KAAK8J,IAAI7J,CAAhC,EAEH,CASDiL,kBAAkBY,EAAO,CAGvB,IAAMC,EAAkB,KAAKlC,mBAAqB,KAAKT,WAAWT,QAElE,GAAI,CAACoD,EACH,OAGF,IAAMhK,EAAQzB,KAAKC,MAAM,KAAKwB,MAAQgK,CAAxB,GAA4C,KAAK1F,KAAKO,aAAa5G,EAC3EgC,EAAS1B,KAAKC,MAAM,KAAKyB,OAAS+J,CAAzB,GAA6C,KAAK1F,KAAKO,aAAa3G,EAE/E,CAAC,KAAK+L,YAAYjK,EAAOC,CAAxB,GAAmC,CAAC8J,GAGzC,KAAK5B,QAAQ+B,iBAAiBlK,EAAOC,CAArC,CACD,CAMDgK,YAAYjK,EAAOC,EAAQ,CACzB,OAAID,IAAU,KAAK0I,oBACZzI,IAAW,KAAK0I,qBACrB,KAAKD,mBAAqB1I,EAC1B,KAAK2I,oBAAsB1I,EACpB,IAGF,EACR,CAGDkK,uBAAwB,CAAA,IAAAC,EACtB,OAAAA,EAAO,KAAKjC,QAAQkC,eAApB,MAAAD,IAAA,OAAA,OAAOA,EAA0BE,OAClC,CAWDC,OAAOC,EAAeC,EAAaC,EAAoBC,EAAc,CACnE,GAAM,CAAErG,KAAAA,CAAF,EAAW,KACjB,GAAI,CAAC,KAAKsG,WAAL,GACEtG,EAAKkF,WAAWC,UAAhB,EACL,OAGFnF,EAAKwB,SAAS,eAAgB,CAC5B0E,cAAAA,EAAeC,YAAAA,EAAaC,mBAAAA,CADA,CAA9B,EAKApG,EAAKuG,WAAWC,WAAhB,EAMA,IAAMC,EAAgB,KAAKrF,cAEtBiF,IACHH,EAAgB3L,EAAM2L,EAAe,KAAKnD,WAAWtI,IAAK,KAAKsI,WAAWrI,GAArD,GAOvB,KAAKgM,aAAaR,CAAlB,EACA,KAAKzC,IAAI9J,EAAI,KAAKgN,yBAAyB,IAAKR,EAAaM,CAAhD,EACb,KAAKhD,IAAI7J,EAAI,KAAK+M,yBAAyB,IAAKR,EAAaM,CAAhD,EACb1M,GAAW,KAAK0J,GAAN,EAEV,IAAMmD,EAAmB,IAAM,CAC7B,KAAKC,eAAeX,CAApB,EACA,KAAKlB,oBAAL,GAGGoB,EAGHpG,EAAKuG,WAAWO,gBAAgB,CAC9BC,MAAO,GACPC,KAAM,SACNnI,OAAQ,KAAKmF,UACbhJ,UAAW,KAAKiM,oBAAL,EACXC,WAAYN,EACZxL,SAAUgL,EACVe,OAAQnH,EAAKD,QAAQoH,OAPvB,EAFAP,EAAgB,CAYnB,CAKDQ,WAAWjB,EAAa,CACtB,KAAKF,OACH,KAAK7E,gBAAkB,KAAK2B,WAAWT,QACnC,KAAKS,WAAWR,UAAY,KAAKQ,WAAWT,QAChD6D,EACA,KAAKnG,KAAKD,QAAQsH,qBAJpB,CAMD,CAQDX,aAAatF,EAAe,CAC1B,KAAKA,cAAgBA,EACrB,KAAK+C,OAAO7C,OAAO,KAAKF,aAAxB,CACD,CAeDuF,yBAAyBjF,EAAM4F,EAAOb,EAAe,CAEnD,GADyB,KAAKtC,OAAOzJ,IAAIgH,CAAhB,EAAwB,KAAKyC,OAAO1J,IAAIiH,CAAhB,IACxB,EACvB,OAAO,KAAKyC,OAAO9C,OAAOK,CAAnB,EAGJ4F,IACHA,EAAQ,KAAKtH,KAAKuH,uBAAV,GAGLd,IACHA,EAAgB,KAAK1D,WAAWT,SAGlC,IAAMkF,EAAa,KAAKpG,cAAgBqF,EACxC,OAAO,KAAKtC,OAAOrC,WACjBJ,GACC,KAAK+B,IAAI/B,CAAT,EAAiB4F,EAAM5F,CAAD,GAAU8F,EAAaF,EAAM5F,CAAD,CAF9C,CAIR,CAQD8D,MAAMiC,EAAMC,EAAM,CAChB,KAAKjE,IAAI9J,EAAI,KAAKwK,OAAOrC,WAAW,IAAK2F,CAA5B,EACb,KAAKhE,IAAI7J,EAAI,KAAKuK,OAAOrC,WAAW,IAAK4F,CAA5B,EACb,KAAK1C,oBAAL,CACD,CAMD2C,YAAa,CACX,MAAOC,EAAQ,KAAKlM,OAAW,KAAK0F,cAAgB,KAAK2B,WAAWZ,GACrE,CAMDmE,YAAa,CACX,MAAOsB,EAAQ,KAAKlM,OAAU,KAAKmI,QAAQyC,WAAb,CAC/B,CAMDtB,qBAAsB,CACpB,KAAK6C,oBAAoB,KAAKpE,IAAI9J,EAAG,KAAK8J,IAAI7J,EAAG,KAAKwH,aAAtD,EACI,OAAS,KAAKpB,KAAK8H,WACrB,KAAK9H,KAAKwB,SAAS,gBAAiB,CAAEL,MAAO,KAA7C,CAEH,CAED4D,qBAAsB,CACpB,KAAK3D,cAAgB,KAAK2B,WAAWT,QAGrC,KAAK6B,OAAO7C,OAAO,KAAKF,aAAxB,EACA5H,EAAe,KAAKiK,IAAK,KAAKU,OAAO9C,MAAvB,EACd,KAAKrB,KAAKwB,SAAS,iBAAkB,CAAEL,MAAO,KAA9C,CACD,CAUD0G,oBAAoBlO,EAAGC,EAAGmO,EAAM,CAC9BA,GAAQ,KAAKvE,mBAAqB,KAAKT,WAAWT,QAClDxH,EAAa,KAAKkJ,UAAWrK,EAAGC,EAAGmO,CAAvB,CACb,CAEDpD,eAAgB,CACd,GAAM,CAAE3E,KAAAA,CAAF,EAAW,KAEjBxG,EACE,KAAKqI,YACLZ,GAAejB,EAAKD,QAASC,EAAKO,aAAc,KAAKqB,KAAM,KAAKnB,KAAlD,CAFF,EAKd,KAAKsC,WAAWzB,OAAO,KAAK5F,MAAO,KAAKC,OAAQ,KAAKkG,WAArD,EAEA7B,EAAKwB,SAAS,gBAAiB,CAC7BL,MAAO,KADT,CAGD,CAGD8F,qBAAsB,CACpB,IAAMrM,EAAQ,KAAKwG,eAAiB,KAAKoC,mBAAqB,KAAKT,WAAWT,SAC9E,OAAO3H,EAAkB,KAAK8I,IAAI9J,EAAG,KAAK8J,IAAI7J,EAAGgB,CAAzB,CACzB,CAiBDiM,eAAemB,EAAe,CACxBA,IAAkB,KAAKxE,oBAI3B,KAAKA,kBAAoBwE,EACzB,KAAKnD,kBAAL,EAEA,KAAK7E,KAAKwB,SAAS,mBAAnB,EACD,CAndS,EC7BNyG,GAAmB,IACnBC,GAAyB,GAGzBC,GAAqB,GAIrBC,GAAuB,GAO7B,SAASC,GAAQC,EAAiBC,EAAkB,CAClD,OAAOD,EAAkBC,GAAoB,EAAIA,EAClD,CAKD,IAAMC,EAAN,KAAkB,CAIhB9J,YAAY+J,EAAU,CACpB,KAAKA,SAAWA,EAChB,KAAKzI,KAAOyI,EAASzI,KAErB,KAAK0I,SAAW,CAAE/O,EAAG,EAAGC,EAAG,EAC5B,CAED+O,OAAQ,CACF,KAAK3I,KAAK8H,WACZtO,EAAe,KAAKkP,SAAU,KAAK1I,KAAK8H,UAAUrE,GAApC,EAEhB,KAAKzD,KAAKuG,WAAWqC,QAArB,CACD,CAEDC,QAAS,CACP,GAAM,CAAEpP,GAAAA,EAAIqP,OAAAA,EAAQC,SAAAA,CAAd,EAA2B,KAAKN,SAChC,CAAEX,UAAAA,CAAF,EAAgB,KAAK9H,KAE3B,GAAI+I,IAAa,KACV,KAAK/I,KAAKD,QAAQiJ,qBACjBlB,GAAaA,EAAU1G,eAAiB0G,EAAU/E,WAAWZ,KAC9D,CAAC,KAAKsG,SAASQ,aAAc,CAElC,IAAMvB,EAAOI,EAAUrE,IAAI7J,GAAKH,EAAGG,EAAIkP,EAAOlP,GAC9C,GAAI,CAAC,KAAKoG,KAAKwB,SAAS,eAAgB,CAAEkG,KAAAA,EAArC,EAA6CtC,iBAAkB,CAClE,KAAK8D,oBAAoB,IAAKxB,EAAMQ,EAApC,EACA,IAAMiB,EAAY,EAAIlP,KAAKG,IAAI,KAAKgP,sBAAsBtB,EAAUrE,IAAI7J,CAAzC,CAAT,EACtB,KAAKoG,KAAKqJ,eAAeF,CAAzB,EACArB,EAAU9C,oBAAV,CACD,CACF,MAC2B,KAAKsE,qBAAqB,GAA1B,IAExB,KAAKA,qBAAqB,GAA1B,EAEIxB,IACF/N,GAAW+N,EAAUrE,GAAX,EACVqE,EAAU9C,oBAAV,GAIP,CAEDuE,KAAM,CACJ,GAAM,CAAEC,SAAAA,CAAF,EAAe,KAAKf,SACpB,CAAEvD,WAAAA,EAAY4C,UAAAA,CAAd,EAA4B,KAAK9H,KACnCyJ,EAAY,EAKhB,GAHA,KAAKzJ,KAAKuG,WAAWqC,QAArB,EAGI1D,EAAWC,UAAX,EAAwB,CAQ1B,IAAMuE,GANsBxE,EAAWvL,EAAIuL,EAAWyE,cAAX,GAMgB,KAAK3J,KAAKO,aAAa5G,EAU7E6P,EAAS7P,EAAI,CAACyO,IAAwBsB,EAA8B,GACjEF,EAAS7P,EAAI,IAAO+P,EAA8B,KAExDD,EAAY,EACZD,EAAS7P,EAAIM,KAAKQ,IAAI+O,EAAS7P,EAAG,CAArB,IACH6P,EAAS7P,EAAIyO,IAAwBsB,EAA8B,GACvEF,EAAS7P,EAAI,KAAQ+P,EAA8B,MAEzDD,EAAY,GACZD,EAAS7P,EAAIM,KAAKS,IAAI8O,EAAS7P,EAAG,CAArB,GAGfuL,EAAW0E,YAAYH,EAAW,GAAMD,EAAS7P,CAAjD,CACD,CAGImO,GAAaA,EAAU1G,cAAgB0G,EAAU/E,WAAWrI,KAC1D,KAAK+N,SAASQ,aACnB,KAAKR,SAAS1F,WAAW8G,eAAe,EAAxC,GAMA,KAAKC,yBAAyB,GAA9B,EACA,KAAKA,yBAAyB,GAA9B,EAEH,CAMDA,yBAAyBpI,EAAM,CAC7B,GAAM,CAAE8H,SAAAA,CAAF,EAAe,KAAKf,SACpB,CAAEX,UAAAA,CAAF,EAAgB,KAAK9H,KAE3B,GAAI,CAAC8H,EACH,OAGF,GAAM,CAAErE,IAAAA,EAAKU,OAAAA,CAAP,EAAkB2D,EAClBiC,EAAStG,EAAI/B,CAAD,EACZsI,EAAoB,KAAKhK,KAAKmJ,UAAY,GAAKzH,IAAS,IAIxD6G,EAAmB,KAGnB0B,EAAoBF,EAAS1B,GAAQmB,EAAS9H,CAAD,EAAQ6G,CAAjB,EAE1C,GAAIyB,EAAkB,CACpB,IAAME,EAAa,KAAKd,sBAAsBW,CAA3B,EACbI,EAAsB,KAAKf,sBAAsBa,CAA3B,EAI5B,GAAKC,EAAa,GAAKC,EAAsB,CAAChC,IACtC+B,EAAa,GAAKC,EAAsBhC,GAAqB,CACnE,KAAKnI,KAAKoK,MAAV,EACA,MACD,CACF,CAGD,IAAMC,EAAuBlG,EAAOrC,WAAWJ,EAAMuI,CAAxB,EAI7B,GAAIF,IAAWM,EACb,OAIF,IAAMC,EAAgBD,IAAyBJ,EAAqB,EAAI,IAElEM,EAAmB,KAAKvK,KAAKmJ,UAC7BqB,EAAeH,EAAuBN,EAE5C,KAAK/J,KAAKuG,WAAWkE,YAAY,CAC/BzD,KAAM,aAAetF,EACrBqF,MAAO,GACP4B,MAAOoB,EACPR,IAAKc,EACLb,SAAUA,EAAS9H,CAAD,EAClB4I,aAAAA,EACAI,SAAWC,GAAQ,CAEjB,GAAIX,GAAoB,KAAKhK,KAAKmJ,UAAY,EAAG,CAE/C,IAAMyB,EAAyB,GAAKP,EAAuBM,GAAOH,EAKlE,KAAKxK,KAAKqJ,eAAe9O,EACvBgQ,GAAoB,EAAIA,GAAoBK,EAC5C,EACA,CAH4B,CAA9B,CAKD,CAEDnH,EAAI/B,CAAD,EAASzH,KAAK4Q,MAAMF,CAAX,EACZ7C,EAAU9C,oBAAV,CACD,EAzBH,CA2BD,CAYDsE,qBAAqB5H,EAAM,CACzB,GAAM,CAAEjI,GAAAA,EAAIsP,SAAAA,EAAUD,OAAAA,EAAQG,aAAAA,CAAxB,EAAyC,KAAKR,SAC9C,CAAEX,UAAAA,EAAW5C,WAAAA,CAAb,EAA4B,KAAKlF,KACjC8K,EAASrR,EAAGiI,CAAD,EAASoH,EAAOpH,CAAD,EAC1BqJ,EAAiB7F,EAAWvL,EAAImR,EAEtC,GAAI,CAACA,GAAS,CAAChD,EACb,MAAO,GAIT,GAAIpG,IAAS,KAAO,CAACoG,EAAUH,WAAV,GAA0B,CAACsB,EAC9C/D,OAAAA,EAAW8F,OAAOD,EAAgB,EAAlC,EACO,GAGT,GAAM,CAAE5G,OAAAA,CAAF,EAAa2D,EACbmD,EAASnD,EAAUrE,IAAI/B,CAAd,EAAsBoJ,EAErC,GAAI,KAAK9K,KAAKD,QAAQmL,gBACfnC,IAAa,KACbrH,IAAS,KACT,CAACuH,EAAc,CACpB,IAAMkC,EAAuBjG,EAAWyE,cAAX,EAGvByB,EAAsBlG,EAAWvL,EAAIwR,EAErCE,EAAgBP,EAAQ,EACxBQ,EAAgB,CAACD,EAEvB,GAAIJ,EAAS9G,EAAO1J,IAAIiH,CAAX,GAAoB2J,EAAe,CAQ9C,GAF6BlH,EAAO1J,IAAIiH,CAAX,GAAoB,KAAKgH,SAAShH,CAAd,EAG/CwD,OAAAA,EAAW8F,OAAOD,EAAgB,EAAlC,EACO,GAEP,KAAK7B,oBAAoBxH,EAAMuJ,CAA/B,CAGH,SAAUA,EAAS9G,EAAOzJ,IAAIgH,CAAX,GAAoB4J,EAAe,CAMrD,GAF6B,KAAK5C,SAAShH,CAAd,GAAuByC,EAAOzJ,IAAIgH,CAAX,EAGlDwD,OAAAA,EAAW8F,OAAOD,EAAgB,EAAlC,EACO,GAEP,KAAK7B,oBAAoBxH,EAAMuJ,CAA/B,CAGH,SAEKG,IAAwB,EAAG,CAE7B,GAAIA,EAAsB,EACxBlG,OAAAA,EAAW8F,OAAO/Q,KAAKS,IAAIqQ,EAAgBI,CAAzB,EAAgD,EAAlE,EACO,GACF,GAAIC,EAAsB,EAE/BlG,OAAAA,EAAW8F,OAAO/Q,KAAKQ,IAAIsQ,EAAgBI,CAAzB,EAAgD,EAAlE,EACO,EAEV,MAEC,KAAKjC,oBAAoBxH,EAAMuJ,CAA/B,CAGL,MACKvJ,IAAS,IAEP,CAACwD,EAAWC,UAAX,GAA0BhB,EAAO1J,IAAIb,IAAMuK,EAAOzJ,IAAId,GACzD,KAAKsP,oBAAoBxH,EAAMuJ,CAA/B,EAGF,KAAK/B,oBAAoBxH,EAAMuJ,CAA/B,EAIJ,MAAO,EACR,CAgBD7B,sBAAsB1B,EAAM,CAAA,IAAA6D,EAAAC,EAC1B,OAAQ9D,IAAI6D,GAAAC,EAAI,KAAKxL,KAAK8H,aAAV,MAAA0D,IAAA,OAAA,OAAAA,EAAqBrH,OAAO9C,OAAOzH,KAAK,MAAA2R,IAAA,OAAAA,EAAA,KAAO,KAAKvL,KAAKO,aAAa3G,EAAI,EAC3F,CAYDsP,oBAAoBxH,EAAM+J,EAAcC,EAAgB,CACtD,GAAM,CAAE5D,UAAAA,CAAF,EAAgB,KAAK9H,KAE3B,GAAI,CAAC8H,EACH,OAGF,GAAM,CAAErE,IAAAA,EAAKU,OAAAA,CAAP,EAAkB2D,EAGxB,GAFqB3D,EAAOrC,WAAWJ,EAAM+J,CAAxB,IAEAA,GAAgBC,EAAgB,CACnD,IAAMZ,EAAQ7Q,KAAKC,MAAMuR,EAAehI,EAAI/B,CAAD,CAA7B,EACd+B,EAAI/B,CAAD,GAAUoJ,GAASY,GAAkBzD,GACzC,MACCxE,EAAI/B,CAAD,EAAS+J,CAEf,CAtUe,ECtBZE,GAAsB,IACtBC,GAAsB,IAW5B,SAASC,GAAoB7R,EAAGP,EAAIC,EAAI,CACtCM,OAAAA,EAAEL,GAAKF,EAAGE,EAAID,EAAGC,GAAK,EACtBK,EAAEJ,GAAKH,EAAGG,EAAIF,EAAGE,GAAK,EACfI,CACR,CAED,IAAM8R,EAAN,KAAkB,CAIhBpN,YAAY+J,EAAU,CACpB,KAAKA,SAAWA,EAKhB,KAAKsD,UAAY,CAAEpS,EAAG,EAAGC,EAAG,GAK5B,KAAKoS,gBAAkB,CAAErS,EAAG,EAAGC,EAAG,GAKlC,KAAKqS,WAAa,CAAEtS,EAAG,EAAGC,EAAG,GAE7B,KAAKsS,qBAAuB,GAE5B,KAAKC,gBAAkB,CACxB,CAEDxD,OAAQ,CACN,GAAM,CAAEb,UAAAA,GAAc,KAAKW,SAASzI,KAChC8H,IACF,KAAKqE,gBAAkBrE,EAAU1G,cACjC5H,EAAe,KAAKuS,UAAWjE,EAAUrE,GAA3B,GAGhB,KAAKgF,SAASzI,KAAKuG,WAAWC,WAA9B,EACA,KAAK0F,qBAAuB,EAC7B,CAEDrD,QAAS,CACP,GAAM,CAAEpP,GAAAA,EAAI2S,QAAAA,EAAS1S,GAAAA,EAAI2S,QAAAA,EAASrM,KAAAA,CAA5B,EAAqC,KAAKyI,SAC1C,CAAEX,UAAAA,CAAF,EAAgB9H,EAEtB,GAAI,CAAC8H,EACH,OAGF,IAAMwE,EAAexE,EAAU/E,WAAWtI,IACpC8R,EAAezE,EAAU/E,WAAWrI,IAE1C,GAAI,CAACoN,EAAUxB,WAAV,GAA0BtG,EAAKkF,WAAWC,UAAhB,EAC7B,OAGF0G,GAAoB,KAAKG,gBAAiBI,EAASC,CAAhC,EACnBR,GAAoB,KAAKI,WAAYxS,EAAIC,CAAtB,EAEnB,IAAI0H,EAAiB,EAAIjH,EAAmBiS,EAASC,CAAV,EACvBlS,EAAmBV,EAAIC,CAAL,EAClB,KAAKyS,gBAOzB,GAJI/K,EAAgB0G,EAAU/E,WAAWT,QAAWwF,EAAU/E,WAAWT,QAAU,KACjF,KAAK4J,qBAAuB,IAG1B9K,EAAgBkL,EAClB,GAAItM,EAAKD,QAAQyM,cACV,CAAC,KAAKN,sBACN,KAAKC,iBAAmBrE,EAAU/E,WAAWT,QAAS,CAE3D,IAAM6G,EAAY,GAAMmD,EAAelL,IAAkBkL,EAAe,KACnEtM,EAAKwB,SAAS,aAAc,CAAE2H,UAAAA,EAA9B,EAA2C/D,kBAC9CpF,EAAKqJ,eAAeF,CAApB,CAEH,MAEC/H,EAAgBkL,GAAgBA,EAAelL,GAAiBwK,QAEzDxK,EAAgBmL,IAEzBnL,EAAgBmL,GAAgBnL,EAAgBmL,GAAgBZ,IAGlE7D,EAAUrE,IAAI9J,EAAI,KAAK8S,0BAA0B,IAAKrL,CAApC,EAClB0G,EAAUrE,IAAI7J,EAAI,KAAK6S,0BAA0B,IAAKrL,CAApC,EAElB0G,EAAUpB,aAAatF,CAAvB,EACA0G,EAAU9C,oBAAV,CACD,CAEDuE,KAAM,CACJ,GAAM,CAAEvJ,KAAAA,CAAF,EAAW,KAAKyI,SAChB,CAAEX,UAAAA,CAAF,EAAgB9H,GACjB,CAAC8H,GAAaA,EAAU1G,cAAgB0G,EAAU/E,WAAWT,UAC3D,CAAC,KAAK4J,sBACNlM,EAAKD,QAAQyM,aAClBxM,EAAKoK,MAAL,EAEA,KAAKP,eAAL,CAEH,CAQD4C,0BAA0B/K,EAAMN,EAAe,CAC7C,IAAMoG,EAAapG,EAAgB,KAAK+K,gBACxC,OAAO,KAAKF,WAAWvK,CAAhB,GACK,KAAKsK,gBAAgBtK,CAArB,EAA6B,KAAKqK,UAAUrK,CAAf,GAAwB8F,CAClE,CAUDqC,eAAe6C,EAAe,CAC5B,GAAM,CAAE1M,KAAAA,CAAF,EAAW,KAAKyI,SAChB,CAAEX,UAAAA,CAAF,EAAgB9H,EAEtB,GAAI,EAAC8H,GAAD,MAACA,EAAWxB,WAAX,GACH,OAGE,KAAK2F,WAAWtS,IAAM,IACxB+S,EAAgB,IAGlB,IAAMjG,EAAgBqB,EAAU1G,cAG5BuL,EACAC,EAA2B,GAE3BnG,EAAgBqB,EAAU/E,WAAWT,QACvCqK,EAAuB7E,EAAU/E,WAAWT,QAEnCmE,EAAgBqB,EAAU/E,WAAWrI,IAC9CiS,EAAuB7E,EAAU/E,WAAWrI,KAG5CkS,EAA2B,GAC3BD,EAAuBlG,GAGzB,IAAM8D,EAAmBvK,EAAKmJ,UACxBa,EAAmBhK,EAAKmJ,UAAY,EAEpC0D,EAAarT,EAAe,CAAEG,EAAG,EAAGC,EAAG,CAAX,EAAgBkO,EAAUrE,GAA3B,EAC7BqJ,EAAiBtT,EAAe,CAAEG,EAAG,EAAGC,EAAG,GAAKiT,CAAjB,EAE/BH,IACF,KAAKT,WAAWtS,EAAI,EACpB,KAAKsS,WAAWrS,EAAI,EACpB,KAAKoS,gBAAgBrS,EAAI,EACzB,KAAKqS,gBAAgBpS,EAAI,EACzB,KAAKuS,gBAAkB1F,EACvBjN,EAAe,KAAKuS,UAAWc,CAAjB,GAGZD,IACFE,EAAiB,CACfnT,EAAG,KAAK8S,0BAA0B,IAAKE,CAApC,EACH/S,EAAG,KAAK6S,0BAA0B,IAAKE,CAApC,IAKP7E,EAAUpB,aAAaiG,CAAvB,EAEAG,EAAiB,CACfnT,EAAGmO,EAAU3D,OAAOrC,WAAW,IAAKgL,EAAenT,CAAhD,EACHC,EAAGkO,EAAU3D,OAAOrC,WAAW,IAAKgL,EAAelT,CAAhD,CAFY,EAMjBkO,EAAUpB,aAAaD,CAAvB,EAEA,IAAMsG,EAAiB,CAACzS,EAAYwS,EAAgBD,CAAjB,EAEnC,GAAI,CAACE,GAAkB,CAACH,GAA4B,CAAC5C,EAAkB,CAErElC,EAAUjB,eAAe8F,CAAzB,EACA7E,EAAU9C,oBAAV,EAGA,MACD,CAEDhF,EAAKuG,WAAWC,WAAhB,EAEAxG,EAAKuG,WAAWkE,YAAY,CAC1B1D,MAAO,GACP4B,MAAO,EACPY,IAAK,IACLC,SAAU,EACVc,aAAc,EACd0C,iBAAkB,GAClBtC,SAAWuC,GAAQ,CAGjB,GAFAA,GAAO,IAEHF,GAAkBH,EAA0B,CAM9C,GALIG,IACFjF,EAAUrE,IAAI9J,EAAIkT,EAAWlT,GAAKmT,EAAenT,EAAIkT,EAAWlT,GAAKsT,EACrEnF,EAAUrE,IAAI7J,EAAIiT,EAAWjT,GAAKkT,EAAelT,EAAIiT,EAAWjT,GAAKqT,GAGnEL,EAA0B,CAC5B,IAAMM,EAAezG,GACNkG,EAAuBlG,GAAiBwG,EACvDnF,EAAUpB,aAAawG,CAAvB,CACD,CAEDpF,EAAU9C,oBAAV,CACD,CAGGgF,GAAoBhK,EAAKmJ,UAAY,GAIvCnJ,EAAKqJ,eAAe9O,EAClBgQ,GAAoB,EAAIA,GAAoB0C,EAAK,EAAG,CAD7B,CAAzB,GAKJ/F,WAAY,IAAM,CAEhBY,EAAUjB,eAAe8F,CAAzB,EACA7E,EAAU9C,oBAAV,CACD,EAvCH,CAyCD,CA9Oe,ECPlB,SAASmI,GAAoBC,EAAO,CAClC,MAAO,CAAC,CAA8BA,EAAMvO,OAAQwO,QAAQ,kBAAvB,CACtC,CAKD,IAAMC,EAAN,KAAiB,CAIf5O,YAAY+J,EAAU,CACpB,KAAKA,SAAWA,CACjB,CAMD8E,MAAMjG,EAAOkG,EAAe,CAC1B,IAAMC,EAA8CD,EAAc3O,OAAQ6O,UACpEC,EAAeF,EAAgBG,SAAS,WAAzB,EACfC,EAAoBJ,EAAgBG,SAAS,YAAzB,GACGH,EAAgBG,SAAS,iBAAzB,EAEzBD,EACF,KAAKG,oBAAoB,aAAcxG,EAAOkG,CAA9C,EACSK,GACT,KAAKC,oBAAoB,UAAWxG,EAAOkG,CAA3C,CAEH,CAMDO,IAAIzG,EAAOkG,EAAe,CACpBL,GAAoBK,CAAD,GACrB,KAAKM,oBAAoB,MAAOxG,EAAOkG,CAAvC,CAEH,CAMDQ,UAAU1G,EAAOkG,EAAe,CAC1BL,GAAoBK,CAAD,GACrB,KAAKM,oBAAoB,YAAaxG,EAAOkG,CAA7C,CAEH,CAQDM,oBAAoBG,EAAY3G,EAAOkG,EAAe,CAAA,IAAAU,EACpD,GAAM,CAAElO,KAAAA,CAAF,EAAW,KAAKyI,SAChB,CAAEX,UAAAA,CAAF,EAAgB9H,EAChBmO,EAA+DF,EAAa,SAC5E7K,EAAcpD,EAAKD,QAAQoO,CAAb,EAEpB,GAAInO,CAAAA,EAAKwB,SAAS2M,EAAgB,CAAE7G,MAAAA,EAAOkG,cAAAA,EAAvC,EAAwDpI,iBAI5D,IAAI,OAAOhC,GAAgB,WAAY,CACrCA,EAAYgL,KAAKpO,EAAMsH,EAAOkG,CAA9B,EACA,MACD,CAED,OAAQpK,EAAR,CACE,IAAK,QACL,IAAK,OACHpD,EAAKoD,CAAD,EAAJ,EACA,MACF,IAAK,OACH0E,GAAWV,WAAWE,CAAtB,EACA,MACF,IAAK,gBAGCQ,GAAS,MAATA,EAAWxB,WAAX,GACGwB,EAAU/E,WAAWR,YAAcuF,EAAU/E,WAAWT,QAC7DwF,EAAUV,WAAWE,CAArB,EACStH,EAAKD,QAAQsO,yBACtBrO,EAAKoK,MAAL,EAEF,MACF,IAAK,mBACH8D,EAAA,KAAKzF,SAASzI,KAAKgG,WAAnB,MAAAkI,IAAA,QAAAA,EAA4BR,UAAUY,OAAO,kBAA7C,EAMA,KAzBJ,EA2BD,CA7Fc,ECZXC,GAAwB,GAGxBC,GAAmB,IACnBC,GAAmB,GASnBC,EAAN,KAAe,CAIbhQ,YAAYsB,EAAM,CAChB,KAAKA,KAAOA,EAGZ,KAAK+I,SAAW,KAKhB,KAAKtP,GAAK,CAAEE,EAAG,EAAGC,EAAG,CAAX,EAEV,KAAKF,GAAK,CAAEC,EAAG,EAAGC,EAAG,CAAX,EAEV,KAAKkP,OAAS,CAAEnP,EAAG,EAAGC,EAAG,GAEzB,KAAK+U,OAAS,CAAEhV,EAAG,EAAGC,EAAG,GAEzB,KAAKwS,QAAU,CAAEzS,EAAG,EAAGC,EAAG,GAE1B,KAAKyS,QAAU,CAAE1S,EAAG,EAAGC,EAAG,GAE1B,KAAK4P,SAAW,CAAE7P,EAAG,EAAGC,EAAG,GAK3B,KAAKgV,aAAe,CAAEjV,EAAG,EAAGC,EAAG,GAI/B,KAAKiV,YAAc,CAAElV,EAAG,EAAGC,EAAG,GAE9B,KAAKkV,iBAAmB,EAIxB,KAAKC,iBAAmB,CAAA,EAExB,KAAKC,mBAAqB,iBAAkB5Q,OAE5C,KAAK6Q,qBAAuB,CAAC,CAAE7Q,OAAO8Q,aACtC,KAAKC,cAAgB,KAAKH,oBACA,KAAKC,sBAAwBjR,UAAUoR,eAAiB,EAElF,KAAKN,iBAAmB,EAExB,KAAKO,cAAgB,EAErB,KAAKC,oBAAsB,GAC3B,KAAKrG,aAAe,GACpB,KAAKsG,WAAa,GAClB,KAAKC,UAAY,GAEjB,KAAKC,IAAM,KAIX,KAAKC,UAAY,KAEZ,KAAKP,gBAERnP,EAAKD,QAAQmL,eAAiB,IAGhC,KAAKyE,KAAO,IAAInH,EAAY,IAAhB,EACZ,KAAKzF,WAAa,IAAI+I,EAAY,IAAhB,EAClB,KAAK8D,WAAa,IAAItC,EAAW,IAAf,EAElBtN,EAAK6P,GAAG,aAAc,IAAM,CAC1B7P,EAAK8P,OAAOlR,IACVoB,EAAK+P,WACL,QAC2B,KAAKC,SAASC,KAAK,IAAnB,CAH7B,EAMI,KAAKhB,qBACP,KAAKiB,YAAY,UAAW,OAAQ,KAAM,QAA1C,EACS,KAAKlB,oBACd,KAAKkB,YAAY,QAAS,QAAS,MAAO,QAA1C,EAUIlQ,EAAK+P,aACP/P,EAAK+P,WAAWI,YAAc,IAAM,CAAA,EACpCnQ,EAAK+P,WAAWK,WAAa,IAAM,CAAA,IAGrC,KAAKF,YAAY,QAAS,OAAQ,IAAlC,EAzBJ,CA4BD,CASDA,YAAYG,EAAMC,EAAMC,EAAIC,EAAQ,CAClC,GAAM,CAAExQ,KAAAA,CAAF,EAAW,KACX,CAAE8P,OAAAA,CAAF,EAAa9P,EAEbyQ,EAAcD,EAASH,EAAOG,EAAS,GAE7CV,EAAOlR,IACLoB,EAAK+P,WACLM,EAAOC,EACoB,KAAKI,cAAcT,KAAK,IAAxB,CAH7B,EAKAH,EAAOlR,IAAIR,OAAQiS,EAAO,OAAmC,KAAKM,cAAcV,KAAK,IAAxB,CAA7D,EACAH,EAAOlR,IAAIR,OAAQiS,EAAOE,EAA+B,KAAKK,YAAYX,KAAK,IAAtB,CAAzD,EACIQ,GACFX,EAAOlR,IACLoB,EAAK+P,WACLU,EAC2B,KAAKG,YAAYX,KAAK,IAAtB,CAH7B,CAMH,CAKDS,cAAc7T,EAAG,CAOf,IAAMgU,EAAiBhU,EAAEiC,OAAS,aAAejC,EAAEiU,cAAgB,QAKnE,GAAID,GAAkBhU,EAAEC,OAAS,EAC/B,OAGF,GAAM,CAAEkD,KAAAA,GAAS,KAGjB,GAAI,CAACA,EAAK2D,OAAOC,OAAQ,CACvB/G,EAAEkU,eAAF,EACA,MACD,CAEG/Q,EAAKwB,SAAS,cAAe,CAAEgM,cAAe3Q,EAA9C,EAAmDuI,mBAInDyL,IACF7Q,EAAKgR,cAAL,EAIA,KAAKC,8BAA8BpU,EAAG,MAAtC,GAGFmD,EAAKuG,WAAWqC,QAAhB,EAEA,KAAKsI,cAAcrU,EAAG,MAAtB,EAEI,KAAKiS,mBAAqB,IAC5B,KAAK/F,SAAW,KAGhBvP,EAAe,KAAK4S,QAAS,KAAK3S,EAApB,GAGZ,KAAKqV,iBAAmB,GAE1B,KAAKqC,eAAL,EACA,KAAKlI,aAAe,IAEpB,KAAKA,aAAe,GAEvB,CAKD0H,cAAc9T,EAAG,CACf,KAAKoU,8BAA8BpU,EAAG,MAAtC,EAEK,KAAKiS,mBAIV,KAAKoC,cAAcrU,EAAG,MAAtB,EAEI,MAAKmD,KAAKwB,SAAS,cAAe,CAAEgM,cAAe3Q,EAAnD,EAAwDuI,mBAIxD,KAAK0J,mBAAqB,GAAK,CAAC,KAAKS,YAClC,KAAKxG,UACR,KAAKqI,wBAAL,EAIE,KAAKrI,UAAY,CAAC,KAAKwG,aACrB,KAAKC,YACP,KAAKA,UAAY,GACjB,KAAKzM,WAAWwG,IAAhB,GAGF,KAAKgG,WAAa,GAClB,KAAK4B,eAAL,EAGA,KAAKE,mBAAL,EACA,KAAKhC,cAAgBiC,KAAKrE,IAAL,EAErB,KAAKqC,oBAAsB,GAC3B9V,EAAe,KAAKqV,YAAa,KAAKpV,EAAxB,EACd,KAAK+P,SAAS7P,EAAI,EAClB,KAAK6P,SAAS5P,EAAI,EAClB,KAAK+V,KAAKhH,MAAV,EAEA,KAAK4I,aAAL,EACA,KAAKC,eAAL,IAEO,KAAK1C,iBAAmB,GAAK,CAAC,KAAKU,YAC5C,KAAKiC,YAAL,EAEA,KAAKjC,UAAY,GAGjB,KAAK6B,mBAAL,EAEA,KAAKtO,WAAW4F,MAAhB,EAEA,KAAK4I,aAAL,EACA,KAAKC,eAAL,IAEH,CAKDC,aAAc,CACR,KAAKlC,aACP,KAAKA,WAAa,GAIb,KAAKD,qBACR,KAAKoC,gBAAgB,EAArB,EAGF,KAAK/B,KAAKpG,IAAV,EACA,KAAKR,SAAW,KAEnB,CAKD6H,YAAY/T,EAAG,CACR,KAAKiS,mBAIV,KAAKoC,cAAcrU,EAAG,IAAtB,EAEI,MAAKmD,KAAKwB,SAAS,YAAa,CAAEgM,cAAe3Q,EAAjD,EAAsDuI,mBAItD,KAAK0J,mBAAqB,IAC5B,KAAKyC,aAAL,EAEI,KAAKhC,WACP,KAAKkC,YAAL,EACS,CAAC,KAAKjC,WAAa,CAAC,KAAKvG,cAElC,KAAK0I,WAAW9U,CAAhB,GAIA,KAAKiS,iBAAmB,GAAK,KAAKU,YACpC,KAAKA,UAAY,GACjB,KAAKzM,WAAWwG,IAAhB,EAEI,KAAKuF,mBAAqB,IAE5B,KAAK/F,SAAW,KAChB,KAAKsI,mBAAL,KAGL,CAKDG,gBAAiB,EACX,KAAKjC,YAAc,KAAKC,aAC1B,KAAKkC,gBAAL,EAEI,KAAKnC,WAEFjV,EAAY,KAAKb,GAAI,KAAKqP,MAAf,GACd,KAAK6G,KAAK9G,OAAV,GAGE,CAACvO,EAAY,KAAKb,GAAI,KAAKqP,MAAf,GACT,CAACxO,EAAY,KAAKZ,GAAI,KAAKiV,MAAf,IACjB,KAAK5L,WAAW8F,OAAhB,EAIJ,KAAK+I,kBAAL,EACA,KAAKnC,IAAMoC,sBAAsB,KAAKL,eAAevB,KAAK,IAAzB,CAAD,EAEnC,CAQDyB,gBAAgBjM,EAAO,CACrB,IAAMqM,EAAOR,KAAKrE,IAAL,EACP7R,EAAW0W,EAAO,KAAKzC,cAEzBjU,EAAW,IAAM,CAACqK,IAKtB,KAAK+D,SAAS7P,EAAI,KAAKoY,aAAa,IAAK3W,CAAvB,EAClB,KAAKoO,SAAS5P,EAAI,KAAKmY,aAAa,IAAK3W,CAAvB,EAElB,KAAKiU,cAAgByC,EACrBtY,EAAe,KAAKqV,YAAa,KAAKpV,EAAxB,EACd,KAAK6V,oBAAsB,GAC5B,CAMDqC,WAAW9U,EAAG,CACZ,GAAM,CAAEqI,WAAAA,GAAe,KAAKlF,KAG5B,GAAIkF,EAAWC,UAAX,EAAwB,CAG1BD,EAAW0E,YAAY,EAAG,EAA1B,EACA,MACD,CAGD,GAAI/M,EAAEiC,KAAKkT,QAAQ,QAAf,EAA2B,EAC7B,OAIF,GAAInV,EAAEiC,OAAS,WAAajC,EAAEiU,cAAgB,QAAS,CACrD,KAAKlB,WAAWrC,MAAM,KAAKnB,QAASvP,CAApC,EACA,MACD,CAGD,IAAMoV,EAAW,KAAKjS,KAAKD,QAAQmS,gBAAkB1D,GAAmB,EAKpE,KAAKkB,WACP,KAAKyB,eAAL,EAEIhX,EAAmB,KAAKyU,aAAc,KAAKxC,OAAzB,EAAoCqC,IACxD,KAAKmB,WAAW5B,UAAU,KAAK5B,QAASvP,CAAxC,IAGFrD,EAAe,KAAKoV,aAAc,KAAKxC,OAAzB,EACd,KAAKsD,UAAYyC,WAAW,IAAM,CAChC,KAAKvC,WAAW7B,IAAI,KAAK3B,QAASvP,CAAlC,EACA,KAAKsU,eAAL,GACCc,CAHwB,EAK9B,CAKDd,gBAAiB,CACX,KAAKzB,YACP0C,aAAa,KAAK1C,SAAN,EACZ,KAAKA,UAAY,KAEpB,CAUDqC,aAAarQ,EAAMtG,EAAU,CAE3B,IAAMiX,EAAe,KAAK5Y,GAAGiI,CAAR,EAAgB,KAAKmN,YAAYnN,CAAjB,EAErC,OAAIzH,KAAKG,IAAIiY,CAAT,EAAyB,GAAKjX,EAAW,EACpCiX,EAAejX,EAGjB,CACR,CAKDmW,cAAe,CACT,KAAK9B,MACP6C,qBAAqB,KAAK7C,GAAN,EACpB,KAAKA,IAAM,KAEd,CAODwB,8BAA8BpU,EAAGiU,EAAa,CAChB,KAAK9Q,KAAKuS,aAAa,sBAAuB,GAAM1V,EAAGiU,CAAvD,GAE1BjU,EAAEkU,eAAF,CAEH,CAUDG,cAAcrU,EAAGiU,EAAa,CAC5B,GAAI,KAAK7B,qBAAsB,CAC7B,IAAMuD,EAA4C3V,EAE5C4V,EAAe,KAAK1D,iBAAiB2D,UAAWC,GAC7CA,EAAe9Y,KAAO2Y,EAAaI,SADvB,EAIjB9B,IAAgB,MAAQ2B,EAAe,GAEzC,KAAK1D,iBAAiB8D,OAAOJ,EAAc,CAA3C,EACS3B,IAAgB,QAAU2B,IAAiB,GAEpD,KAAK1D,iBAAiBnP,KAAK,KAAKkT,wBAAwBN,EAAc,CAAE7Y,EAAG,EAAGC,EAAG,CAAX,CAA3C,CAA3B,EACS6Y,EAAe,IAExB,KAAKK,wBAAwBN,EAAc,KAAKzD,iBAAiB0D,CAAtB,CAA3C,EAGF,KAAK3D,iBAAmB,KAAKC,iBAAiBgE,OAI1C,KAAKjE,iBAAmB,GAC1BtV,EAAe,KAAKC,GAAI,KAAKsV,iBAAiB,CAAtB,CAAV,EAGZ,KAAKD,iBAAmB,GAC1BtV,EAAe,KAAKE,GAAI,KAAKqV,iBAAiB,CAAtB,CAAV,CAEjB,KAAM,CACL,IAAMiE,EAAwCnW,EAE9C,KAAKiS,iBAAmB,EACpBkE,EAAWlU,KAAKkT,QAAQ,OAAxB,EAAmC,GAGjCgB,EAAWC,SAAWD,EAAWC,QAAQF,OAAS,IACpD,KAAKD,wBAAwBE,EAAWC,QAAQ,CAAnB,EAAuB,KAAKxZ,EAAzD,EACA,KAAKqV,mBACDkE,EAAWC,QAAQF,OAAS,IAC9B,KAAKD,wBAAwBE,EAAWC,QAAQ,CAAnB,EAAuB,KAAKvZ,EAAzD,EACA,KAAKoV,sBAKT,KAAKgE,wBAAqDjW,EAAI,KAAKpD,EAAnE,EACIqX,IAAgB,KAElB,KAAKhC,iBAAmB,EAExB,KAAKA,mBAGV,CACF,CAKD8C,mBAAoB,CAClBpY,EAAe,KAAKsP,OAAQ,KAAKrP,EAAnB,EACdD,EAAe,KAAKmV,OAAQ,KAAKjV,EAAnB,CACf,CAKD2X,oBAAqB,CACnB7X,EAAe,KAAK4S,QAAS,KAAK3S,EAApB,EACdD,EAAe,KAAK6S,QAAS,KAAK3S,EAApB,EACd,KAAKkY,kBAAL,CACD,CAGDR,yBAA0B,CACxB,GAAI,KAAKpR,KAAKkF,WAAWC,UAArB,EAEF,KAAK4D,SAAW,QACX,CAEL,IAAMmK,EAAOjZ,KAAKG,IAAI,KAAKX,GAAGE,EAAI,KAAKyS,QAAQzS,CAAlC,EAAuCM,KAAKG,IAAI,KAAKX,GAAGG,EAAI,KAAKwS,QAAQxS,CAAlC,EAEpD,GAAIsZ,IAAS,EAAG,CAEd,IAAMC,EAAcD,EAAO,EAAI,IAAM,IAEjCjZ,KAAKG,IAAI,KAAKX,GAAG0Z,CAAR,EAAuB,KAAK/G,QAAQ+G,CAAb,CAAhC,GAA8D5E,KAChE,KAAKxF,SAAWoK,EAEnB,CACF,CACF,CAWDL,wBAAwBjW,EAAG7C,EAAG,CAC5BA,OAAAA,EAAEL,EAAIkD,EAAEuW,MAAQ,KAAKpT,KAAKqT,OAAO1Z,EACjCK,EAAEJ,EAAIiD,EAAEyW,MAAQ,KAAKtT,KAAKqT,OAAOzZ,EAE7B,cAAeiD,EACjB7C,EAAEH,GAAKgD,EAAE+V,UACA/V,EAAE0W,aAAezZ,SAC1BE,EAAEH,GAAKgD,EAAE0W,YAGJvZ,CACR,CAMDgW,SAASnT,EAAG,CAEN,KAAKmD,KAAKkF,WAAWC,UAArB,IACFtI,EAAEkU,eAAF,EACAlU,EAAE2W,gBAAF,EAEH,CAxkBY,EChBTC,GAA2B,IAa3BC,EAAN,KAAiB,CAIfhV,YAAYsB,EAAM,CAChB,KAAKA,KAAOA,EACZ,KAAKrG,EAAI,EACT,KAAKga,WAAa,EAElB,KAAKC,mBAAqB,EAE1B,KAAKC,mBAAqB,EAE1B,KAAKC,qBAAuB,GAG5B,KAAKC,YAAc,CAAA,CACpB,CAQDxO,OAAOyO,EAAc,CACnB,GAAM,CAAEhU,KAAAA,CAAF,EAAW,KACXiU,EAAgBha,KAAKC,MACzB8F,EAAKO,aAAa5G,EAAIqG,EAAKO,aAAa5G,EAAIqG,EAAKD,QAAQmU,OADrC,EAMhBC,EAAqBF,IAAkB,KAAKN,WAE9CQ,IACF,KAAKR,WAAaM,EAClB,KAAKjJ,OAAO,KAAKrB,cAAL,CAAZ,GAGF,KAAKoK,YAAY3U,QAAQ,CAACgV,EAAY3T,IAAU,CAC1C0T,GACFrZ,EAAasZ,EAAW/a,IAAKoH,EAAQ,KAAKqT,sBACZ,KAAKH,UADvB,EAIVK,GAAgBI,EAAWjT,OAC7BiT,EAAWjT,MAAMoE,OAAjB,EAPJ,CAUD,CAKD8O,eAAgB,CAGd,KAAKT,mBAAqB,EAC1B,KAAKC,mBAAqB,EAG1B,KAAKF,WAAa,EAGlB,KAAKG,qBAAuB,EAC7B,CAMDQ,eAAgB,CACd,KAAKP,YAAc,CAAA,EAInB,QAASQ,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMlb,EAAKJ,EAAc,aAAc,MAAO,KAAK+G,KAAKgE,SAAhC,EACxB3K,EAAGmb,aAAa,OAAQ,OAAxB,EACAnb,EAAGmb,aAAa,uBAAwB,OAAxC,EACAnb,EAAGmb,aAAa,cAAe,MAA/B,EAGAnb,EAAG0B,MAAM0Z,QAAWF,IAAM,EAAK,QAAU,OAEzC,KAAKR,YAAYnU,KAAK,CACpBvG,GAAAA,EADF,CAID,CACF,CAMDqb,aAAc,CACZ,OAAO,KAAK1U,KAAK2U,YAAV,EAA0B,CAClC,CAiBD/K,YAAYsJ,EAAM0B,EAASC,EAAW,CACpC,GAAM,CAAE7U,KAAAA,CAAF,EAAW,KACb8U,EAAW9U,EAAK+U,eAAiB7B,EAC/B8B,EAAYhV,EAAK2U,YAAL,EAElB,GAAI3U,EAAKiV,QAAL,EAAgB,CAClBH,EAAW9U,EAAKkV,eAAeJ,CAApB,EACX,IAAMK,GAAYjC,EAAO8B,GAAaA,EAClCG,GAAYH,EAAY,EAE1B9B,EAAOiC,EAGPjC,EAAOiC,EAAWH,CAErB,MACKF,EAAW,EACbA,EAAW,EACFA,GAAYE,IACrBF,EAAWE,EAAY,GAEzB9B,EAAO4B,EAAW9U,EAAK+U,eAGzB/U,EAAK+U,eAAiBD,EACtB,KAAKlB,oBAAsBV,EAE3BlT,EAAKuG,WAAW6O,eAAhB,EAEA,IAAMC,EAAe,KAAK1L,cAAL,EACrB,GAAI,CAACiL,EACH,KAAK5J,OAAOqK,CAAZ,EACA,KAAKC,eAAL,MACK,CACLtV,EAAKuG,WAAWkE,YAAY,CAC1B8K,aAAc,GACd5M,MAAO,KAAKhP,EACZ4P,IAAK8L,EACL7L,SAAUqL,GAAa,EACvB7H,iBAAkB,GAClB1C,aAAc,EACdI,SAAW/Q,GAAM,CACf,KAAKqR,OAAOrR,CAAZ,GAEFuN,WAAY,IAAM,CAChB,KAAKoO,eAAL,EACAtV,EAAK8E,YAAL,CACD,EAbH,EAgBA,IAAI0Q,EAAWxV,EAAK+U,eAAiB/U,EAAKuD,UAC1C,GAAIvD,EAAKiV,QAAL,EAAgB,CAClB,IAAMQ,GAAgBD,EAAWR,GAAaA,EAC1CS,GAAgBT,EAAY,EAE9BQ,EAAWC,EAGXD,EAAWC,EAAeT,CAE7B,CAIG/a,KAAKG,IAAIob,CAAT,EAAqB,GACvB,KAAKF,eAAL,CAEH,CAED,MAAO1N,EAAQsL,CAChB,CAODvJ,eAAgB,CACd,OAAO,KAAKgK,WAAa,KAAKC,kBAC/B,CAODzO,WAAY,CACV,OAAO,KAAKxL,IAAM,KAAKgQ,cAAL,CACnB,CAKD2L,gBAAiB,CAAA,IAAAI,EACf,GAAM,CAAE1V,KAAAA,CAAF,EAAW,KACX2V,EAAqB,KAAK9B,mBAAqB,KAAKD,mBAE1D,GAAI,CAAC+B,EACH,OAGF,KAAK9B,mBAAqB,KAAKD,mBAE/B5T,EAAKuD,UAAYvD,EAAK+U,eAEtB,IAAIa,EAAU3b,KAAKG,IAAIub,CAAT,EAEVE,EAEAD,GAAW,IACb,KAAK9B,sBAAwB6B,GAAsBA,EAAqB,EAAI,GAAK,GACjFC,EAAU,GAGZ,QAASrB,EAAI,EAAGA,EAAIqB,EAASrB,IACvBoB,EAAqB,GACvBE,EAAa,KAAK9B,YAAY+B,MAAjB,EACTD,IACF,KAAK9B,YAAY,CAAjB,EAAsB8B,EAEtB,KAAK/B,uBAELhZ,EAAa+a,EAAWxc,IAAK,KAAKya,qBAAuB,GAAK,KAAKH,UAAvD,EAEZ3T,EAAK+V,WAAWF,EAAa7V,EAAKuD,UAAYqS,EAAWrB,EAAI,CAA7D,KAGFsB,EAAa,KAAK9B,YAAYiC,IAAjB,EACTH,IACF,KAAK9B,YAAYkC,QAAQJ,CAAzB,EAEA,KAAK/B,uBAELhZ,EAAa+a,EAAWxc,GAAI,KAAKya,qBAAuB,KAAKH,UAAjD,EAEZ3T,EAAK+V,WAAWF,EAAa7V,EAAKuD,UAAYqS,EAAWrB,EAAI,CAA7D,IAWFta,KAAKG,IAAI,KAAK0Z,oBAAd,EAAsC,IAAM,CAAC,KAAK3O,UAAL,IAC/C,KAAKkP,cAAL,EACA,KAAK9O,OAAL,GAIFvF,EAAKuG,WAAWC,WAAhB,EAEA,KAAKuN,YAAY3U,QAAQ,CAACgV,EAAYG,IAAM,CACtCH,EAAWjT,OAEbiT,EAAWjT,MAAMmD,YAAYiQ,IAAM,CAAnC,EAHJ,EAOAvU,EAAK8H,WAAL4N,EAAiB,KAAK3B,YAAY,CAAjB,KAAA,MAAA2B,IAAA,OAAA,OAAAA,EAAqBvU,MACtCnB,EAAK8D,cAAcoS,WAAWP,CAA9B,EAEI3V,EAAK8H,WACP9H,EAAK8H,UAAU9C,oBAAf,EAGFhF,EAAKwB,SAAS,QAAd,CACD,CAQDwJ,OAAOrR,EAAGwc,EAAU,CAClB,GAAI,CAAC,KAAKnW,KAAKiV,QAAV,GAAuBkB,EAAU,CAEpC,IAAIC,GAAwB,KAAKzC,WAAa,KAAKC,mBAAsBja,GAAK,KAAKga,WACnFyC,GAAuB,KAAKpW,KAAKuD,UACjC,IAAMuH,EAAQ7Q,KAAKC,MAAMP,EAAI,KAAKA,CAApB,GAETyc,EAAsB,GAAKtL,EAAQ,GAChCsL,GAAuB,KAAKpW,KAAK2U,YAAV,EAA0B,GAAK7J,EAAQ,KACpEnR,EAAI,KAAKA,EAAKmR,EAAQ2I,GAEzB,CAED,KAAK9Z,EAAIA,EAEL,KAAKqG,KAAKgE,WACZlJ,EAAa,KAAKkF,KAAKgE,UAAWrK,CAAtB,EAGd,KAAKqG,KAAKwB,SAAS,iBAAkB,CAAE7H,EAAAA,EAAGwc,SAAUA,GAAY,GAAhE,CACD,CAzTc,ECdXE,GAAsB,CAC1BC,OAAQ,GACRC,EAAG,GACHC,UAAW,GACXC,QAAS,GACTC,WAAY,GACZC,UAAW,GACXC,IAAK,CAPqB,EAgBtBC,EAAsB,CAACC,EAAKC,IACzBA,EAAiBD,EAAMT,GAAoBS,CAAD,EAO7CE,EAAN,KAAe,CAIbtY,YAAYsB,EAAM,CAChB,KAAKA,KAAOA,EAEZ,KAAKiX,YAAc,GAEnBjX,EAAK6P,GAAG,aAAc,IAAM,CACtB7P,EAAKD,QAAQmX,YAEVlX,EAAKD,QAAQoX,mBAIhB,KAAKC,WAAL,EAGFpX,EAAK8P,OAAOlR,IACVtF,SACA,UAC2B,KAAK+d,WAAWpH,KAAK,IAArB,CAH7B,GAOFjQ,EAAK8P,OAAOlR,IAAItF,SAAU,UAAsC,KAAKge,WAAWrH,KAAK,IAArB,CAAhE,EAjBF,EAoBA,IAAMsH,EAAgDje,SAASke,cAC/DxX,EAAK6P,GAAG,UAAW,IAAM,CACnB7P,EAAKD,QAAQ0X,aACVF,GACA,KAAKN,aACVM,EAAkBG,MAAlB,EAJJ,CAOD,CAGDN,YAAa,CACP,CAAC,KAAKH,aAAe,KAAKjX,KAAKgG,UACjC,KAAKhG,KAAKgG,QAAQ0R,MAAlB,EACA,KAAKT,YAAc,GAEtB,CAMDK,WAAWza,EAAG,CACZ,GAAM,CAAEmD,KAAAA,CAAF,EAAW,KAMjB,GAJIA,EAAKwB,SAAS,UAAW,CAAEgM,cAAe3Q,EAA1C,EAA+CuI,kBAI/CxI,GAAeC,CAAD,EAIhB,OAIF,IAAI8a,EAEAjW,EACAkW,EAAY,GACVb,EAAiB,QAASla,EAEhC,OAAQka,EAAiBla,EAAEia,IAAMja,EAAEgb,QAAnC,CACE,KAAKhB,EAAoB,SAAUE,CAAX,EAClB/W,EAAKD,QAAQ+X,SACfH,EAAgB,SAElB,MACF,KAAKd,EAAoB,IAAKE,CAAN,EACtBY,EAAgB,aAChB,MACF,KAAKd,EAAoB,YAAaE,CAAd,EACtBrV,EAAO,IACP,MACF,KAAKmV,EAAoB,UAAWE,CAAZ,EACtBrV,EAAO,IACP,MACF,KAAKmV,EAAoB,aAAcE,CAAf,EACtBrV,EAAO,IACPkW,EAAY,GACZ,MACF,KAAKf,EAAoB,YAAaE,CAAd,EACtBa,EAAY,GACZlW,EAAO,IACP,MACF,KAAKmV,EAAoB,MAAOE,CAAR,EACtB,KAAKK,WAAL,EACA,KAzBJ,CA8BA,GAAI1V,EAAM,CAER7E,EAAEkU,eAAF,EAEA,GAAM,CAAEjJ,UAAAA,CAAF,EAAgB9H,EAElBA,EAAKD,QAAQgY,WACVrW,IAAS,KACT1B,EAAK2U,YAAL,EAAqB,EAC1BgD,EAAgBC,EAAY,OAAS,OAC5B9P,GAAaA,EAAU1G,cAAgB0G,EAAU/E,WAAWZ,MAKrE2F,EAAUrE,IAAI/B,CAAd,GAAuBkW,EAAY,IAAM,GACzC9P,EAAUtC,MAAMsC,EAAUrE,IAAI9J,EAAGmO,EAAUrE,IAAI7J,CAA/C,EAEH,CAEG+d,IACF9a,EAAEkU,eAAF,EAEA/Q,EAAK2X,CAAD,EAAJ,EAEH,CAQDN,WAAWxa,EAAG,CACZ,GAAM,CAAEmb,SAAAA,CAAF,EAAe,KAAKhY,KACtBgY,GACG1e,WAAauD,EAAEgC,QACfmZ,IAAanb,EAAEgC,QACf,CAACmZ,EAASpK,SAA8B/Q,EAAEgC,MAAzC,GAENmZ,EAASN,MAAT,CAEH,CAhJY,EC/BTO,GAAiB,2BAkBjBC,EAAN,KAAmB,CAMjBxZ,YAAYyZ,EAAO,CAAA,IAAAC,EACjB,KAAKD,MAAQA,EACb,GAAM,CACJtZ,OAAAA,EACAqI,WAAAA,EACAlM,UAAAA,EACAqd,SAAAA,EAAW,IAAM,CAAA,EACjBjd,SAAAA,EAAW,IACX+L,OAAAA,EAAS8Q,EANL,EAOFE,EAEJ,KAAKE,SAAWA,EAGhB,IAAMld,EAAOH,EAAY,YAAc,UACjCH,GAAYsd,EAAAA,EAAMhd,CAAD,KAAR,MAAAid,IAAA,OAAAA,EAAkB,GAGjC,KAAKE,QAAUzZ,EAEf,KAAK0Z,YAAcrR,EAEnB,KAAKsR,UAAY,GAGjB,KAAKC,iBAAmB,KAAKA,iBAAiBxI,KAAK,IAA3B,EASxB,KAAKyI,eAAiBvG,WAAW,IAAM,CACrCjX,GAAmB2D,EAAQ1D,EAAMC,EAAU+L,CAAzB,EAClB,KAAKuR,eAAiBvG,WAAW,IAAM,CACrCtT,EAAOR,iBAAiB,gBAAiB,KAAKoa,iBAAkB,EAAhE,EACA5Z,EAAOR,iBAAiB,mBAAoB,KAAKoa,iBAAkB,EAAnE,EAMA,KAAKC,eAAiBvG,WAAW,IAAM,CACrC,KAAKwG,mBAAL,CACD,EAAEvd,EAAW,GAFkB,EAGhCyD,EAAO9D,MAAMI,CAAb,EAAqBN,CACtB,EAAE,EAZ6B,GAa/B,CAf6B,CAgBjC,CAMD4d,iBAAiB5b,EAAG,CACdA,EAAEgC,SAAW,KAAKyZ,SACpB,KAAKK,mBAAL,CAEH,CAKDA,oBAAqB,CACd,KAAKH,YACR,KAAKA,UAAY,GACjB,KAAKH,SAAL,EACI,KAAKE,aACP,KAAKA,YAAL,EAGL,CAGDlT,SAAU,CACJ,KAAKqT,gBACPtG,aAAa,KAAKsG,cAAN,EAEd9c,GAAsB,KAAK0c,OAAN,EACrB,KAAKA,QAAQM,oBAAoB,gBAAiB,KAAKH,iBAAkB,EAAzE,EACA,KAAKH,QAAQM,oBAAoB,mBAAoB,KAAKH,iBAAkB,EAA5E,EACK,KAAKD,WACR,KAAKG,mBAAL,CAEH,CA5FgB,ECpBbE,GAA4B,GAC5BC,GAAwB,IAKxBC,EAAN,KAAkB,CAgBhBra,YAAY4J,EAAiBgC,EAAc0C,EAAkB,CAC3D,KAAKxD,SAAWlB,EAAkB,IAGlC,KAAK0Q,cAAgB1O,GAAgBwO,GAGrC,KAAKG,kBAAoBjM,GAAoB6L,GAE7C,KAAKK,iBAAmB,KAAKD,kBAEzB,KAAKD,cAAgB,IACvB,KAAKE,kBAAoBjf,KAAKI,KAAK,EAAI,KAAK2e,cAAgB,KAAKA,aAAxC,EAE5B,CAQDG,UAAUC,EAAeC,EAAW,CAMlC,IAAIhH,EAAe,EACfiH,EAEJD,GAAa,IAEb,IAAME,EAAoBtf,KAAKuf,IAAM,CAAC,KAAKR,cAAgB,KAAKC,kBAAoBI,GAEpF,GAAI,KAAKL,gBAAkB,EACzBM,EAAQ,KAAK9P,SAAW,KAAKyP,kBAAoBG,EAEjD/G,GAAgB+G,EAAgBE,EAAQD,GAAaE,EAErD,KAAK/P,SAAW6I,EACK,CAAC,KAAK4G,kBAAqBK,EAC5BC,UACX,KAAKP,cAAgB,EAAG,CACjCM,EAAS,EAAI,KAAKJ,kBACL,KAAKF,cAAgB,KAAKC,kBAAoBG,EAAgB,KAAK5P,UAEhF,IAAMiQ,EAAaxf,KAAKyf,IAAI,KAAKR,iBAAmBG,CAAjC,EACbM,EAAa1f,KAAK2f,IAAI,KAAKV,iBAAmBG,CAAjC,EAEnBhH,EAAekH,GACKH,EAAgBK,EAAaH,EAAQK,GAEzD,KAAKnQ,SAAW6I,EACK,CAAC,KAAK4G,kBACP,KAAKD,cACLO,GACC,CAAC,KAAKL,iBAAmBE,EAAgBO,EAC1C,KAAKT,iBAAmBI,EAAQG,EACrD,CAID,OAAOpH,CACR,CAhFe,ECWZwH,EAAN,KAAsB,CAIpBnb,YAAYyZ,EAAO,CACjB,KAAKA,MAAQA,EACb,KAAK2B,KAAO,EAEZ,GAAM,CACJnR,MAAAA,EACAY,IAAAA,EACAC,SAAAA,EACAkB,SAAAA,EACAxD,WAAAA,EACAmR,SAAAA,EAAW,IAAM,CAAA,EACjB/N,aAAAA,EACA0C,iBAAAA,CARI,EASFmL,EAEJ,KAAKE,SAAWA,EAEhB,IAAM0B,EAAQ,IAAIhB,EAAYvP,EAAUc,EAAc0C,CAAxC,EACVgN,EAAW1I,KAAKrE,IAAL,EACXmM,EAAgBzQ,EAAQY,EAEtB0Q,EAAgB,IAAM,CACtB,KAAKH,OACPV,EAAgBW,EAAMZ,UAAUC,EAAe9H,KAAKrE,IAAL,EAAa+M,CAA5C,EAGZ/f,KAAKG,IAAIgf,CAAT,EAA0B,GAAKnf,KAAKG,IAAI2f,EAAMvQ,QAAf,EAA2B,IAE5DkB,EAASnB,CAAD,EACJrC,GACFA,EAAU,EAEZ,KAAKmR,SAAL,IAEA2B,EAAW1I,KAAKrE,IAAL,EACXvC,EAAS0O,EAAgB7P,CAAjB,EACR,KAAKuQ,KAAOjI,sBAAsBoI,CAAD,KAKvC,KAAKH,KAAOjI,sBAAsBoI,CAAD,CAClC,CAGD5U,SAAU,CACJ,KAAKyU,MAAQ,GACfxH,qBAAqB,KAAKwH,IAAN,EAEtB,KAAKA,KAAO,CACb,CAtDmB,ECGhBI,EAAN,KAAiB,CACfxb,aAAc,CAEZ,KAAKyb,iBAAmB,CAAA,CACzB,CAKD1P,YAAY0N,EAAO,CACjB,KAAKiC,OAAOjC,EAAO,EAAnB,CACD,CAKDrR,gBAAgBqR,EAAO,CACrB,KAAKiC,OAAOjC,CAAZ,CACD,CAQDiC,OAAOjC,EAAOkC,EAAU,CACtB,IAAMC,EAAYD,EACd,IAAIR,EAAmD1B,CAAvD,EACA,IAAID,EAA6CC,CAAjD,EAEJ,YAAKgC,iBAAiBva,KAAK0a,CAA3B,EACAA,EAAUjC,SAAW,IAAM,KAAKkC,KAAKD,CAAV,EAEpBA,CACR,CAKDC,KAAKD,EAAW,CACdA,EAAUjV,QAAV,EACA,IAAM5E,EAAQ,KAAK0Z,iBAAiBnI,QAAQsI,CAA9B,EACV7Z,EAAQ,IACV,KAAK0Z,iBAAiBtH,OAAOpS,EAAO,CAApC,CAEH,CAEDmI,SAAU,CACR,KAAKuR,iBAAiB/a,QAASkb,GAAc,CAC3CA,EAAUjV,QAAV,EADF,EAGA,KAAK8U,iBAAmB,CAAA,CACzB,CAKD3T,YAAa,CACX,KAAK2T,iBAAmB,KAAKA,iBAAiBxa,OAAQ2a,GAChDA,EAAUnC,MAAMpR,OAClBuT,EAAUjV,QAAV,EACO,IAGF,EANe,CAQzB,CAED+P,gBAAiB,CACf,KAAK+E,iBAAmB,KAAKA,iBAAiBxa,OAAQ2a,GAChDA,EAAUnC,MAAM5C,cAClB+E,EAAUjV,QAAV,EACO,IAGF,EANe,CAQzB,CAcDmV,cAAe,CACb,OAAO,KAAKL,iBAAiBM,KAAMH,GAC1BA,EAAUnC,MAAMpR,KADlB,CAGR,CAhGc,ECdX2T,EAAN,KAAkB,CAIhBhc,YAAYsB,EAAM,CAChB,KAAKA,KAAOA,EACZA,EAAK8P,OAAOlR,IAAIoB,EAAKgG,QAAS,QAAoC,KAAK2U,SAAS1K,KAAK,IAAnB,CAAlE,CACD,CAMD0K,SAAS9d,EAAG,CACVA,EAAEkU,eAAF,EACA,GAAM,CAAEjJ,UAAAA,CAAF,EAAgB,KAAK9H,KACvB,CAAE4a,OAAAA,EAAQC,OAAAA,CAAV,EAAqBhe,EAEzB,GAAKiL,GAID,MAAK9H,KAAKwB,SAAS,QAAS,CAAEgM,cAAe3Q,EAA7C,EAAkDuI,iBAItD,GAAIvI,EAAEE,SAAW,KAAKiD,KAAKD,QAAQ+a,aAEjC,GAAIhT,EAAUxB,WAAV,EAAwB,CAC1B,IAAIkB,EAAa,CAACqT,EACdhe,EAAEke,YAAc,EAClBvT,GAAc,IAEdA,GAAc3K,EAAEke,UAAY,EAAI,KAElCvT,EAAa,GAAKA,EAElB,IAAMtB,EAAgB4B,EAAU1G,cAAgBoG,EAChDM,EAAU7B,OAAOC,EAAe,CAC9BvM,EAAGkD,EAAEme,QACLphB,EAAGiD,EAAEoe,QAFP,CAID,OAGGnT,EAAUH,WAAV,IACE9K,EAAEke,YAAc,IAElBH,GAAU,GACVC,GAAU,IAGZ/S,EAAUtC,MACRsC,EAAUrE,IAAI9J,EAAIihB,EAClB9S,EAAUrE,IAAI7J,EAAIihB,CAFpB,EAML,CA1De,ECkClB,SAASK,GAAeC,EAAU,CAChC,GAAI,OAAOA,GAAa,SAQtB,OAAOA,EAGT,GAAI,CAACA,GAAY,CAACA,EAASC,YACzB,MAAO,GAGT,IAAMC,EAAUF,EACZG,EAAM,wFAEVA,OAAAA,EAAMA,EAAI7b,MAAM,IAAV,EAAgB8b,KAA4BF,EAAQG,MAAQ,EAA5D,EAOFH,EAAQI,YACVH,GAAO,8CAAgDD,EAAQI,UAAY,OAG7EH,GAAOD,EAAQK,MAEfJ,GAAO,SAEAA,CACR,CAED,IAAMK,EAAN,KAAgB,CAKdjd,YAAYsB,EAAM4B,EAAM,CAAA,IAAAga,EACtB,IAAM5U,EAAOpF,EAAKoF,MAAQpF,EAAK1I,UAC3B2iB,EAAcja,EAAKka,KAGvB,GAAI9b,EAAKD,QAAQiH,CAAb,IAAuB,GAEzB,OAKE,OAAOhH,EAAKD,QAAQiH,EAAO,KAApB,GAA+B,WAMxC6U,EAAc7b,EAAKD,QAAQiH,EAAO,KAApB,GAGhBhH,EAAKwB,SAAS,kBAAmB,CAAEI,KAAAA,EAAnC,EAEA,IAAI1I,EAAY,GACZ0I,EAAKma,UACP7iB,GAAa,gBACbA,GAAc0I,EAAK1I,WAAc,iBAAgB0I,EAAKoF,IAAK,IAE3D9N,GAAc0I,EAAK1I,WAAc,SAAQ0I,EAAKoF,IAAK,GAGrD,IAAI7N,EAAUyI,EAAKma,SAAYna,EAAKzI,SAAW,SAAayI,EAAKzI,SAAW,MAC5EA,EAAsDA,EAAQ6iB,YAAR,EAEtD,IAAMhW,EAAU/M,EAAcC,EAAWC,CAAZ,EAE7B,GAAIyI,EAAKma,SAAU,CACb5iB,IAAY,WACoB6M,EAASlH,KAAO,UAGpD,GAAI,CAAEmd,MAAAA,CAAF,EAAYra,EACV,CAAEsa,UAAAA,GAActa,EAGlB,OAAO5B,EAAKD,QAAQiH,EAAO,OAApB,GAAiC,WAE1CiV,EAAQjc,EAAKD,QAAQiH,EAAO,OAApB,GAGNiV,IACFjW,EAAQiW,MAAQA,GAGlB,IAAME,EAAWD,GAAaD,EAC1BE,GACFnW,EAAQwO,aAAa,aAAc2H,CAAnC,CAEH,CAEDnW,EAAQoW,UAAYlB,GAAeW,CAAD,EAE9Bja,EAAKya,QACPza,EAAKya,OAAOrW,EAAShG,CAArB,EAGE4B,EAAK0a,UACPtW,EAAQuW,QAAW1f,GAAM,CACnB,OAAO+E,EAAK0a,SAAY,SAE1Btc,EAAK4B,EAAK0a,OAAN,EAAJ,EACS,OAAO1a,EAAK0a,SAAY,YACjC1a,EAAK0a,QAAQzf,EAAGmJ,EAAShG,CAAzB,IAMN,IAAMwc,EAAW5a,EAAK4a,UAAY,MAE9BxY,EAAYhE,EAAKgG,QACjBwW,IAAa,OACVxc,EAAKyc,SACRzc,EAAKyc,OAASxjB,EAAc,oCAAqC,MAAO+G,EAAK+P,UAAlD,GAE7B/L,EAAYhE,EAAKyc,SAIjBzW,EAAQ0H,UAAU9O,IAAI,qBAAtB,EAEI4d,IAAa,YACfxY,EAAYhE,EAAK+P,cAIrB6L,EAAA5X,KAAS,MAAEzK,IAAAA,QAAAA,EAAAA,YAAYyG,EAAKuS,aAAa,YAAavM,EAASpE,CAAxC,CAAvB,CACD,CAtGa,EChEhB,SAAS8a,GAAgB1W,EAAShG,EAAM2c,EAAc,CACpD3W,EAAQ0H,UAAU9O,IAAI,qBAAtB,EAEAoH,EAAQwO,aAAa,gBAAiB,aAAtC,EACAxU,EAAK6P,GAAG,SAAU,IAAM,CACjB7P,EAAKD,QAAQ6c,OACZD,EAED3W,EAAS6W,SAAW,EAAE7c,EAAKuD,UAAYvD,EAAK2U,YAAL,EAAqB,GAG5D3O,EAAS6W,SAAW,EAAE7c,EAAKuD,UAAY,IAP9C,CAWD,CAGM,IAAMuZ,GAAY,CACvB9V,KAAM,YACN9N,UAAW,4BACX+iB,MAAO,WACPc,MAAO,GACPhB,SAAU,GACVS,SAAU,UACVV,KAAM,CACJV,YAAa,GACbI,KAAM,GACNE,MAAO,4EACPD,UAAW,mBAEba,QAAS,OACTD,OAAQK,EAde,EAkBZM,GAAY,CACvBhW,KAAM,YACN9N,UAAW,4BACX+iB,MAAO,OACPc,MAAO,GACPhB,SAAU,GACVS,SAAU,UACVV,KAAM,CACJV,YAAa,GACbI,KAAM,GACNE,MAAO,uCACPD,UAAW,mBAEba,QAAS,OACTD,OAAQ,CAAChjB,EAAI2G,IAAS,CACpB0c,GAAgBrjB,EAAI2G,EAAM,EAAX,CAChB,CAhBsB,EChDnBid,GAAc,CAClBjW,KAAM,QACNiV,MAAO,QACPc,MAAO,GACPhB,SAAU,GACVD,KAAM,CACJV,YAAa,GACbM,MAAO,wFACPD,UAAW,mBAEba,QAAS,OAVS,ECAdY,GAAa,CACjBlW,KAAM,OACNiV,MAAO,OACPc,MAAO,GACPhB,SAAU,GACVD,KAAM,CACJV,YAAa,GAEbM,MAAO,uPAGPD,UAAW,kBAEba,QAAS,YAbQ,ECANa,GAAmB,CAC9BnW,KAAM,YACNwV,SAAU,MACVO,MAAO,EACPjB,KAAM,CACJV,YAAa,GAEbM,MAAO,kIACPD,UAAW,qBAEbY,OAAQ,CAACe,EAAkBpd,IAAS,CAElC,IAAIqd,EAEAC,EAAe,KAMbC,EAAuB,CAACrkB,EAAW0F,IAAQ,CAC/Cwe,EAAiB1P,UAAUY,OAAO,oBAAsBpV,EAAW0F,CAAnE,GAMI4e,EAA0BC,GAAY,CACtCJ,IAAcI,IAChBJ,EAAYI,EACZF,EAAqB,SAAUE,CAAX,IAIlBC,EAA4B,IAAM,CAAA,IAAAC,EACtC,GAAI,GAAAA,EAAC3d,EAAK8H,aAAN,MAAA6V,IAAA,QAACA,EAAgB9Z,QAAQ+Z,UAAxB,GAAqC,CACxCJ,EAAuB,EAAD,EAClBF,IACFlL,aAAakL,CAAD,EACZA,EAAe,MAEjB,MACD,CAEIA,IAEHA,EAAenL,WAAW,IAAM,CAAA,IAAA0L,EAC9BL,EAAuB5V,GAAQ5H,GAAAA,EAAAA,EAAK8H,aAAL,MAAA+V,IAAA,SAAAA,EAAgBha,QAAQ+Z,UAAxB,EAAT,EACtBN,EAAe,IAChB,EAAEtd,EAAKD,QAAQ+d,cAHS,IAO7B9d,EAAK6P,GAAG,SAAU6N,CAAlB,EAEA1d,EAAK6P,GAAG,eAAiBhT,GAAM,CACzBmD,EAAK8H,YAAcjL,EAAEsE,OACvBuc,EAAyB,CAE5B,CAJD,EAOI1d,EAAK+d,KACP/d,EAAK+d,GAAGL,0BAA4BA,EAEvC,CAjE6B,ECAnBM,GAAmB,CAC9BhX,KAAM,UACN+V,MAAO,EACPV,OAAQ,CAAC4B,EAAgBje,IAAS,CAChCA,EAAK6P,GAAG,SAAU,IAAM,CACtBoO,EAAeC,UAAale,EAAKuD,UAAY,EACfvD,EAAKD,QAAQoe,kBACbne,EAAK2U,YAAL,EAHhC,CAKD,CAT6B,ECkBhC,SAASyJ,GAAY/kB,EAAIglB,EAAY,CACnChlB,EAAGqU,UAAUY,OAAO,kBAAmB+P,CAAvC,CACD,CAED,IAAMC,EAAN,KAAS,CAIP5f,YAAYsB,EAAM,CAChB,KAAKA,KAAOA,EACZ,KAAKue,aAAe,GAEpB,KAAKC,eAAiB,CAAA,EAEtB,KAAKC,MAAQ,CAAA,EAEb,KAAKf,0BAA4B,IAAM,CAAA,EAMvC,KAAKgB,sBAAwB5kB,MAC9B,CAED6kB,MAAO,CACL,GAAM,CAAE3e,KAAAA,CAAF,EAAW,KACjB,KAAKue,aAAe,GACpB,KAAKC,eAAiB,CACpBvB,GACAH,GACAE,GACAE,GACAC,GACAa,EANoB,EAStBhe,EAAKwB,SAAS,YAAd,EAGA,KAAKgd,eAAeI,KAAK,CAACC,EAAGC,KAEnBD,EAAE9B,OAAS,IAAM+B,EAAE/B,OAAS,EAFtC,EAKA,KAAK0B,MAAQ,CAAA,EAEb,KAAKF,aAAe,GACpB,KAAKC,eAAepf,QAAS2f,GAAkB,CAC7C,KAAKC,gBAAgBD,CAArB,EADF,EAIA/e,EAAK6P,GAAG,SAAU,IAAM,CAAA,IAAAoP,GACtBA,EAAAjf,EAAKgG,WAAL,MAAAiZ,IAAA,QAAAA,EAAcvR,UAAUY,OAAO,kBAAmBtO,EAAK2U,YAAL,IAAuB,CAAzE,EADF,EAIA3U,EAAK6P,GAAG,gBAAiB,IAAM,KAAKqP,iBAAL,CAA/B,CACD,CAKDF,gBAAgBG,EAAa,CACvB,KAAKZ,aACP,KAAKE,MAAM7e,KACT,IAAI+b,EAAU,KAAK3b,KAAMmf,CAAzB,CADF,EAIA,KAAKX,eAAe5e,KAAKuf,CAAzB,CAEH,CAQDD,kBAAmB,CACjB,GAAM,CAAElH,SAAAA,EAAUlQ,UAAAA,EAAW/H,QAAAA,CAAvB,EAAmC,KAAKC,KAE9C,GAAI,KAAKA,KAAK2D,OAAOyb,WAAa,CAACpH,GAAY,CAAClQ,EAC9C,OAGF,GAAI,CAAE1G,cAAAA,GAAkB0G,EAOxB,GAJK,KAAK9H,KAAK2D,OAAOC,SACpBxC,EAAgB0G,EAAU/E,WAAWT,SAGnClB,IAAkB,KAAKsd,sBACzB,OAEF,KAAKA,sBAAwBtd,EAE7B,IAAMie,EAAoBvX,EAAU/E,WAAWT,QAAUwF,EAAU/E,WAAWR,UAG9E,GAAItI,KAAKG,IAAIilB,CAAT,EAA8B,KAAQ,CAACvX,EAAUxB,WAAV,EAAwB,CAEjE8X,GAAYpG,EAAU,EAAX,EACXA,EAAStK,UAAUxO,OAAO,oBAA1B,EACA,MACD,CAED8Y,EAAStK,UAAU9O,IAAI,oBAAvB,EAEA,IAAM0gB,EAAqBle,IAAkB0G,EAAU/E,WAAWT,QAC9DwF,EAAU/E,WAAWR,UAAYuF,EAAU/E,WAAWT,QAE1D8b,GAAYpG,EAAUsH,GAAsBle,CAAjC,GAEPrB,EAAQwf,mBAAqB,QAC1Bxf,EAAQwf,mBAAqB,kBAClCvH,EAAStK,UAAU9O,IAAI,qBAAvB,CAEH,CAlHM,ECdT,SAAS4gB,GAAmBnmB,EAAI,CAC9B,IAAMomB,EAAgBpmB,EAAGqmB,sBAAH,EACtB,MAAO,CACL/lB,EAAG8lB,EAAcE,KACjB/lB,EAAG6lB,EAAcG,IACjBpkB,EAAGikB,EAAc/jB,MAEpB,CAQD,SAASmkB,GAA0BxmB,EAAIymB,EAAYC,EAAa,CAC9D,IAAMN,EAAgBpmB,EAAGqmB,sBAAH,EAIhBhd,EAAS+c,EAAc/jB,MAAQokB,EAC/Bnd,EAAS8c,EAAc9jB,OAASokB,EAChCC,EAAgBtd,EAASC,EAASD,EAASC,EAE3Csd,GAAWR,EAAc/jB,MAAQokB,EAAaE,GAAiB,EAC/DE,GAAWT,EAAc9jB,OAASokB,EAAcC,GAAiB,EASjE7b,EAAS,CACbxK,EAAG8lB,EAAcE,KAAOM,EACxBrmB,EAAG6lB,EAAcG,IAAMM,EACvB1kB,EAAGskB,EAAaE,CAHH,EAQf7b,OAAAA,EAAOgc,UAAY,CACjB3kB,EAAGikB,EAAc/jB,MACjBD,EAAGgkB,EAAc9jB,OACjBhC,EAAGsmB,EACHrmB,EAAGsmB,GAGE/b,CACR,CAWM,SAASic,GAAe3f,EAAOD,EAAU6f,EAAU,CAExD,IAAMjT,EAAQiT,EAAS7e,SAAS,cAAe,CAC7Cf,MAAAA,EACAD,SAAAA,EACA6f,SAAAA,EAHY,EAMd,GAAIjT,EAAMkT,YAER,OAAOlT,EAAMkT,YAGf,GAAM,CAAEta,QAAAA,CAAF,EAAcxF,EAEhB8f,EAEAC,EAEJ,GAAIva,GAAWqa,EAAStgB,QAAQygB,gBAAkB,GAAO,CACvD,IAAMA,EAAgBH,EAAStgB,QAAQygB,eAAiB,MACxDD,EAAYva,EAAQya,QAAQD,CAAhB,EACRxa,EAA6CA,EAAQ0a,cAAcF,CAAtB,CAClD,CAEDD,OAAAA,EAAYF,EAAS9N,aAAa,UAAWgO,EAAW/f,EAAUC,CAAtD,EAER8f,IACG/f,EAASmgB,aAGZL,EAAcT,GACZU,EACA/f,EAAS9E,OAAS8E,EAAShF,GAAK,EAChCgF,EAAS7E,QAAU6E,EAAS/E,GAAK,CAHI,EAFvC6kB,EAAcd,GAAmBe,CAAD,GAU7BF,EAAS9N,aAAa,cAAe+N,EAAa9f,EAAUC,CAA5D,CACR,CCkGD,IAAMmgB,EAAN,KAAsB,CAKpBliB,YAAYI,EAAM+hB,EAAS,CACzB,KAAK/hB,KAAOA,EACZ,KAAKsG,iBAAmB,GACpByb,GACFviB,OAAOwiB,OAAO,KAAMD,CAApB,CAEH,CAED9P,gBAAiB,CACf,KAAK3L,iBAAmB,EACzB,CAfmB,EAsBhB2b,EAAN,KAAgB,CACdriB,aAAc,CAIZ,KAAKsiB,WAAa,CAAA,EAKlB,KAAKC,SAAW,CAAA,EAGhB,KAAKjhB,KAAOlG,OAGZ,KAAKiG,QAAUjG,MAChB,CAQDonB,UAAUla,EAAMma,EAAIC,EAAW,IAAK,CAAA,IAAAC,EAAAC,EAAAC,EAC7B,KAAKN,SAASja,CAAd,IACH,KAAKia,SAASja,CAAd,EAAsB,CAAA,IAGxBqa,EAAA,KAAKJ,SAASja,CAAd,KAAA,MAAAqa,IAAA,QAAAA,EAAqBzhB,KAAK,CAAEuhB,GAAAA,EAAIC,SAAAA,EAAhC,GACAE,EAAA,KAAKL,SAASja,CAAd,KAAqB4X,MAAAA,IAAAA,QAAAA,EAAAA,KAAK,CAAC4C,EAAIC,IAAOD,EAAGJ,SAAWK,EAAGL,QAAvD,GAEKphB,EAAAA,KAAAA,QAAL,MAAAuhB,IAAA,QAAAA,EAAWL,UAAUla,EAAMma,EAAIC,CAA/B,CACD,CAODM,aAAa1a,EAAMma,EAAI,CACjB,KAAKF,SAASja,CAAd,IAEF,KAAKia,SAASja,CAAd,EAAsB,KAAKia,SAASja,CAAd,EAAoBrH,OAAOA,GAAWA,EAAOwhB,KAAOA,CAApD,GAGpB,KAAKnhB,MACP,KAAKA,KAAK0hB,aAAa1a,EAAMma,CAA7B,CAEH,CAQD5O,aAAavL,KAAS2a,EAAM,CAAA,IAAAC,EAC1B,OAAAA,EAAA,KAAKX,SAASja,CAAd,KAAA,MAAA4a,IAAA,QAAAA,EAAqBxiB,QAASO,GAAW,CAEvCgiB,EAAK,CAAD,EAAMhiB,EAAOwhB,GAAGU,MAAM,KAAMF,CAAtB,EAFZ,EAIOA,EAAK,CAAD,CACZ,CAOD9R,GAAG7I,EAAMma,EAAI,CAAA,IAAAW,EAAAC,EACN,KAAKf,WAAWha,CAAhB,IACH,KAAKga,WAAWha,CAAhB,EAAwB,CAAA,IAErBga,EAAAA,KAAAA,WAAWha,CAAhB,KAAA,MAAA8a,IAAA,QAAAA,EAAuBliB,KAAKuhB,CAA5B,GAKAY,EAAA,KAAK/hB,QAAM6P,MAAAA,IAAAA,QAAAA,EAAAA,GAAG7I,EAAMma,CAApB,CACD,CAODa,IAAIhb,EAAMma,EAAI,CAAA,IAAAc,EACR,KAAKjB,WAAWha,CAAhB,IAEF,KAAKga,WAAWha,CAAhB,EAAwB,KAAKga,WAAWha,CAAhB,EAAsBrH,OAAOZ,GAAaoiB,IAAOpiB,CAAjD,IAG1BkjB,EAAA,KAAKjiB,QAAMgiB,MAAAA,IAAAA,QAAAA,EAAAA,IAAIhb,EAAMma,CAArB,CACD,CAQD3f,SAASwF,EAAM6Z,EAAS,CAAA,IAAAqB,EACtB,GAAI,KAAKliB,KACP,OAAO,KAAKA,KAAKwB,SAASwF,EAAM6Z,CAAzB,EAGT,IAAMzT,EAA0C,IAAIwT,EAAgB5Z,EAAM6Z,CAA1B,EAEhD,OAAAqB,EAAA,KAAKlB,WAAWha,CAAhB,KAAA,MAAAkb,IAAA,QAAAA,EAAuB9iB,QAASL,GAAa,CAC3CA,EAASqP,KAAK,KAAMhB,CAApB,EADF,EAIOA,CACR,CAnHa,ECpOV+U,EAAN,KAAkB,CAKhBzjB,YAAY0jB,EAAUpe,EAAW,CAU/B,GANA,KAAKgC,QAAU/M,EACb,mCACAmpB,EAAW,MAAQ,MACnBpe,CAH0B,EAMxBoe,EAAU,CACZ,IAAMC,EAAyC,KAAKrc,QACpDqc,EAAMC,SAAW,QACjBD,EAAME,IAAM,GACZF,EAAMG,IAAMJ,EACZC,EAAM7N,aAAa,OAAQ,cAA3B,CACD,CAED,KAAKxO,QAAQwO,aAAa,cAAe,MAAzC,CACD,CAMD5O,iBAAiBlK,EAAOC,EAAQ,CACzB,KAAKqK,UAIN,KAAKA,QAAQ7M,UAAY,OAI3BoC,EAAe,KAAKyK,QAAS,IAAK,MAApB,EACd,KAAKA,QAAQjL,MAAM2J,gBAAkB,MACrC,KAAKsB,QAAQjL,MAAMC,UAAYL,EAAkB,EAAG,EAAGe,EAAQ,GAAf,GAEhDH,EAAe,KAAKyK,QAAStK,EAAOC,CAAtB,EAEjB,CAED0J,SAAU,CAAA,IAAAod,GACRA,EAAI,KAAKzc,WAAL,MAAAyc,IAAA,QAAAA,EAAcC,YAChB,KAAK1c,QAAQ9G,OAAb,EAEF,KAAK8G,QAAU,IAChB,CApDe,ECMZ2c,EAAN,KAAc,CAMZjkB,YAAY8B,EAAU6f,EAAU5f,EAAO,CACrC,KAAK4f,SAAWA,EAChB,KAAKze,KAAOpB,EACZ,KAAKC,MAAQA,EAGb,KAAKuF,QAAUlM,OAEf,KAAKiM,YAAcjM,OAEnB,KAAKqH,MAAQrH,OAEb,KAAK8oB,oBAAsB,EAC3B,KAAKC,qBAAuB,EAE5B,KAAKnnB,MAAQsF,OAAO,KAAKY,KAAKpG,CAAX,GAAiBwF,OAAO,KAAKY,KAAKlG,KAAX,GAAqB,EAC/D,KAAKC,OAASqF,OAAO,KAAKY,KAAKnG,CAAX,GAAiBuF,OAAO,KAAKY,KAAKjG,MAAX,GAAsB,EAEjE,KAAKmnB,WAAa,GAClB,KAAKxd,SAAW,GAChB,KAAKyd,WAAa,GAElB,KAAKC,MAAQzmB,EAAWC,KAEpB,KAAKoF,KAAK9C,KACZ,KAAKA,KAAO,KAAK8C,KAAK9C,KACb,KAAK8C,KAAK4gB,IACnB,KAAK1jB,KAAO,QAEZ,KAAKA,KAAO,OAGd,KAAKuhB,SAAS7e,SAAS,cAAe,CAAEqC,QAAS,KAAjD,CACD,CAEDof,mBAAoB,CACd,KAAKld,aAAe,CAAC,KAAKmd,gBAAL,GAEvB/Q,WAAW,IAAM,CACX,KAAKpM,cACP,KAAKA,YAAYV,QAAjB,EACA,KAAKU,YAAcjM,SAEpB,GALO,CAOb,CAQD8K,KAAKue,EAAQC,EAAQ,CACnB,GAAI,KAAKjiB,OAAS,KAAKkiB,eAAL,EAChB,GAAK,KAAKtd,YAYH,CACL,IAAMud,EAAgB,KAAKvd,YAAYC,QAEnCsd,GAAiB,CAACA,EAAcC,eAClC,KAAKpiB,MAAM6C,UAAUwf,QAAQF,CAA7B,CAEH,KAlBsB,CACrB,IAAMG,EAAiB,KAAKpD,SAAS9N,aACnC,iBAGC,KAAK3Q,KAAK8hB,MAAQ,KAAKviB,MAAMuC,aAAgB,KAAK9B,KAAK8hB,KAAO,GAC/D,IALqB,EAOvB,KAAK3d,YAAc,IAAIoc,EACrBsB,EACA,KAAKtiB,MAAM6C,SAFM,CAIpB,CASC,KAAKgC,SAAW,CAACod,GAIjB,KAAK/C,SAAS7e,SAAS,cAAe,CAAEqC,QAAS,KAAMsf,OAAAA,EAAvD,EAAiE/d,mBAIjE,KAAKue,eAAL,GACF,KAAK3d,QAAU/M,EAAc,YAAa,KAAd,EAGxB,KAAK2pB,qBACP,KAAKgB,UAAUT,CAAf,IAGF,KAAKnd,QAAU/M,EAAc,gBAAiB,KAAlB,EAC5B,KAAK+M,QAAQoW,UAAY,KAAKxa,KAAKka,MAAQ,IAGzCsH,GAAU,KAAKjiB,OACjB,KAAKA,MAAM0D,kBAAkB,EAA7B,EAEH,CAOD+e,UAAUT,EAAQ,CAAA,IAAAU,EAAAC,EAChB,GAAI,CAAC,KAAKH,eAAL,GACA,CAAC,KAAK3d,SACN,KAAKqa,SAAS7e,SAAS,mBAAoB,CAAEqC,QAAS,KAAMsf,OAAAA,EAA5D,EAAsE/d,iBACzE,OAGF,IAAM2e,EAA8C,KAAK/d,QAEzD,KAAKge,kBAAL,EAEI,KAAKpiB,KAAKqiB,SACZF,EAAaE,OAAS,KAAKriB,KAAKqiB,QAGlCF,EAAavB,KAAMqB,EAAA,KAAKjiB,KAAK4gB,OAA7B,MAAAqB,IAAA,OAAAA,EAAoC,GACpCE,EAAaxB,KAAMuB,EAAA,KAAKliB,KAAK2gB,OAA7B,MAAAuB,IAAA,OAAAA,EAAoC,GAEpC,KAAKd,MAAQzmB,EAAWE,QAEpBsnB,EAAa9nB,SACf,KAAKioB,SAAL,GAEAH,EAAa1nB,OAAS,IAAM,CAC1B,KAAK6nB,SAAL,GAGFH,EAAaznB,QAAU,IAAM,CAC3B,KAAK6nB,QAAL,GAGL,CAODC,SAASjjB,EAAO,CACd,KAAKA,MAAQA,EACb,KAAKmE,SAAW,GAChB,KAAK+a,SAAWlf,EAAMnB,IAGvB,CAKDkkB,UAAW,CACT,KAAKlB,MAAQzmB,EAAWG,OAEpB,KAAKyE,OAAS,KAAK6E,UACrB,KAAKqa,SAAS7e,SAAS,eAAgB,CAAEL,MAAO,KAAKA,MAAO0C,QAAS,IAA9B,CAAvC,EAGI,KAAK1C,MAAMmC,UACR,KAAKnC,MAAM+C,eACX,CAAC,KAAK8B,QAAQ0c,aACnB,KAAKje,OAAL,EACA,KAAKtD,MAAM0D,kBAAkB,EAA7B,IAGE,KAAKme,QAAUzmB,EAAWG,QAAU,KAAKsmB,QAAUzmB,EAAWI,QAChE,KAAKsmB,kBAAL,EAGL,CAKDkB,SAAU,CACR,KAAKnB,MAAQzmB,EAAWI,MAEpB,KAAKwE,QACP,KAAKkjB,aAAL,EACA,KAAKhE,SAAS7e,SAAS,eAAgB,CAAEL,MAAO,KAAKA,MAAOmjB,QAAS,GAAMzgB,QAAS,KAApF,EACA,KAAKwc,SAAS7e,SAAS,YAAa,CAAEL,MAAO,KAAKA,MAAO0C,QAAS,KAAlE,EAEH,CAKD+Z,WAAY,CACV,OAAO,KAAKyC,SAAS9N,aACnB,mBACA,KAAKyQ,QAAUzmB,EAAWE,QAC1B,IAHK,CAKR,CAKD6nB,SAAU,CACR,OAAO,KAAKtB,QAAUzmB,EAAWI,KAClC,CAKDgnB,gBAAiB,CACf,OAAO,KAAK7kB,OAAS,OACtB,CAQD8G,iBAAiBlK,EAAOC,EAAQ,CAC9B,GAAK,KAAKqK,UAIN,KAAKD,aACP,KAAKA,YAAYH,iBAAiBlK,EAAOC,CAAzC,EAGE,MAAK0kB,SAAS7e,SAChB,gBACA,CAAEqC,QAAS,KAAMnI,MAAAA,EAAOC,OAAAA,EAFtB,EAEgCyJ,mBAKpC7J,EAAe,KAAKyK,QAAStK,EAAOC,CAAtB,EAEV,KAAKgoB,eAAL,GAAyB,CAAC,KAAKW,QAAL,IAAgB,CAC5C,IAAMC,EAAuB,CAAC,KAAK3B,qBAAuBlnB,EAE1D,KAAKknB,oBAAsBlnB,EAC3B,KAAKmnB,qBAAuBlnB,EAExB4oB,EACF,KAAKX,UAAU,EAAf,EAEA,KAAKI,kBAAL,EAGE,KAAK7iB,OACP,KAAKkf,SAAS7e,SACZ,kBACA,CAAEL,MAAO,KAAKA,MAAOzF,MAAAA,EAAOC,OAAAA,EAAQkI,QAAS,KAF/C,CAKH,CACF,CAKDyC,YAAa,CACX,OAAO,KAAK+Z,SAAS9N,aACnB,oBACA,KAAKoR,eAAL,GAA0B,KAAKX,QAAUzmB,EAAWI,MACpD,IAHK,CAKR,CAKDqnB,mBAAoB,CAMlB,GAAI,CAAC,KAAKL,eAAL,GAAyB,CAAC,KAAK3d,SAAW,CAAC,KAAKpE,KAAKqiB,OACxD,OAGF,IAAMO,EAAuC,KAAKxe,QAC5Cye,EAAa,KAAKpE,SAAS9N,aAC/B,mBACA,KAAKqQ,oBACL,IAHiB,GAOjB,CAAC4B,EAAME,QAAQC,iBACZF,EAAaG,SAASJ,EAAME,QAAQC,gBAAiB,EAAhC,KAExBH,EAAMK,MAAQJ,EAAa,KAC3BD,EAAME,QAAQC,gBAAkBG,OAAOL,CAAD,EAEzC,CAKDpB,gBAAiB,CACf,OAAO,KAAKhD,SAAS9N,aACnB,wBACA,KAAKoR,eAAL,EACA,IAHK,CAKR,CAKDoB,UAAW,CACL,KAAK1E,SAAS7e,SAAS,kBAAmB,CAAEqC,QAAS,KAArD,EAA6DuB,kBAIjE,KAAKR,KAAK,EAAV,CACD,CAKDse,iBAAkB,CAChB,OAAO,KAAK7C,SAAS9N,aACnB,uBACA,KAAKqL,UAAL,EACA,IAHK,CAKR,CAKDvY,SAAU,CACR,KAAKC,SAAW,GAChB,KAAKnE,MAAQrH,OAET,MAAKumB,SAAS7e,SAAS,iBAAkB,CAAEqC,QAAS,KAApD,EAA4DuB,mBAIhE,KAAKlG,OAAL,EAEI,KAAK6G,cACP,KAAKA,YAAYV,QAAjB,EACA,KAAKU,YAAcjM,QAGjB,KAAK6pB,eAAL,GAAyB,KAAK3d,UAChC,KAAKA,QAAQ3J,OAAS,KACtB,KAAK2J,QAAQ1J,QAAU,KACvB,KAAK0J,QAAUlM,QAElB,CAKDuqB,cAAe,CACb,GAAI,KAAKljB,MAAO,CAAA,IAAA6jB,EAAAC,EACd,IAAIC,EAAajsB,EAAc,kBAAmB,KAApB,EAC9BisB,EAAWhH,WAAX8G,GAAAC,EAAuB,KAAK5E,SAAStgB,WAAd,MAAAklB,IAAA,OAAA,OAAAA,EAAuBE,YAA9C,MAAAH,IAAA,OAAAA,EAA0D,GAC1DE,EAA4C,KAAK7E,SAAS9N,aACxD,sBACA2S,EACA,IAH0C,EAK5C,KAAKlf,QAAU/M,EAAc,0CAA2C,KAA5C,EAC5B,KAAK+M,QAAQzM,YAAY2rB,CAAzB,EACA,KAAK/jB,MAAM6C,UAAUka,UAAY,GACjC,KAAK/c,MAAM6C,UAAUzK,YAAY,KAAKyM,OAAtC,EACA,KAAK7E,MAAM0D,kBAAkB,EAA7B,EACA,KAAKoe,kBAAL,CACD,CACF,CAKDxe,QAAS,CACP,GAAI,KAAKqe,YAAc,CAAC,KAAK9c,QAC3B,OAKF,GAFA,KAAK8c,WAAa,GAEd,KAAKE,QAAUzmB,EAAWI,MAAO,CACnC,KAAK0nB,aAAL,EACA,MACD,CAED,GAAI,KAAKhE,SAAS7e,SAAS,gBAAiB,CAAEqC,QAAS,KAAnD,EAA2DuB,iBAC7D,OAGF,IAAMggB,EAAkB,WAAY,KAAKpf,QAErC,KAAK2d,eAAL,EAaEyB,GAAkB,KAAKjkB,QAAU,CAAC,KAAKA,MAAMmC,UAAYvF,EAAQ,IACnE,KAAKglB,WAAa,GAIjB,KAAK/c,QAASjK,OAAf,EAAwBC,MAAM,IAAM,CAAA,CAApC,EAAwCqpB,QAAQ,IAAM,CACpD,KAAKtC,WAAa,GAClB,KAAKuC,YAAL,EAFF,GAKA,KAAKA,YAAL,EAEO,KAAKnkB,OAAS,CAAC,KAAK6E,QAAQ0c,YACrC,KAAKvhB,MAAM6C,UAAUzK,YAAY,KAAKyM,OAAtC,CAEH,CAODzB,UAAW,CACL,KAAK8b,SAAS7e,SAAS,kBAAmB,CAAEqC,QAAS,IAAX,CAA1C,EAA6DuB,kBAC5D,CAAC,KAAKjE,QAIP,KAAKwiB,eAAL,GAAyB,KAAKZ,YAAc,CAAChlB,EAAQ,EAGvD,KAAKunB,YAAL,EACS,KAAKhB,QAAL,GACT,KAAK1f,KAAK,GAAO,EAAjB,EAGE,KAAKzD,MAAM8C,eACb,KAAK9C,MAAM8C,cAAcuQ,aAAa,cAAe,OAArD,EAEH,CAKDhQ,YAAa,CACX,KAAK6b,SAAS7e,SAAS,oBAAqB,CAAEqC,QAAS,KAAvD,EACI,KAAK1C,OAAS,KAAKA,MAAM8C,eAC3B,KAAK9C,MAAM8C,cAAcuQ,aAAa,cAAe,MAArD,CAEH,CAMDtV,QAAS,CACP,KAAK4jB,WAAa,GAEd,MAAKzC,SAAS7e,SAAS,gBAAiB,CAAEqC,QAAS,KAAnD,EAA2DuB,mBAI3D,KAAKY,SAAW,KAAKA,QAAQ0c,YAC/B,KAAK1c,QAAQ9G,OAAb,EAGE,KAAK6G,aAAe,KAAKA,YAAYC,SACvC,KAAKD,YAAYC,QAAQ9G,OAAzB,EAEH,CAKDomB,aAAc,CACP,KAAKxC,aAIN,KAAKzC,SAAS7e,SAAS,qBAAsB,CAAEqC,QAAS,KAAxD,EAAgEuB,mBAKhE,KAAKjE,OAAS,KAAK6E,SAAW,CAAC,KAAKA,QAAQ0c,YAC9C,KAAKvhB,MAAM6C,UAAUzK,YAAY,KAAKyM,OAAtC,GAGE,KAAKgd,QAAUzmB,EAAWG,QAAU,KAAKsmB,QAAUzmB,EAAWI,QAChE,KAAKsmB,kBAAL,GAEH,CA5fW,ECCRsC,GAAsB,EAYrB,SAASC,GAAahlB,EAAU6f,EAAU5f,EAAO,CACtD,IAAMoD,EAAUwc,EAASoF,sBAAsBjlB,EAAUC,CAAzC,EAEZilB,EAEE,CAAE3lB,QAAAA,GAAYsgB,EAIpB,GAAItgB,EAAS,CACX2lB,EAAY,IAAIzjB,EAAUlC,EAASS,EAAU,EAAjC,EAEZ,IAAID,EACA8f,EAASrgB,KACXO,EAAe8f,EAASrgB,KAAKO,aAE7BA,EAAeT,GAAgBC,EAASsgB,CAAV,EAGhC,IAAMxe,EAAcZ,GAAelB,EAASQ,EAAcC,EAAUC,CAAlC,EAClCilB,EAAUpkB,OAAOuC,EAAQnI,MAAOmI,EAAQlI,OAAQkG,CAAhD,CACD,CAEDgC,OAAAA,EAAQkhB,SAAR,EAEIW,GACF7hB,EAAQ+B,iBACN3L,KAAK0rB,KAAK9hB,EAAQnI,MAAQgqB,EAAUpjB,OAApC,EACArI,KAAK0rB,KAAK9hB,EAAQlI,OAAS+pB,EAAUpjB,OAArC,CAFF,EAMKuB,CACR,CAcM,SAAS+hB,GAAcnlB,EAAO4f,EAAU,CAC7C,IAAM7f,EAAW6f,EAASwF,YAAYplB,CAArB,EAEjB,GAAI4f,CAAAA,EAAS7e,SAAS,gBAAiB,CAAEf,MAAAA,EAAOD,SAAAA,EAA5C,EAAwD4E,iBAI5D,OAAOogB,GAAahlB,EAAU6f,EAAU5f,CAArB,CACpB,CAED,IAAMqlB,EAAN,KAAoB,CAIlBpnB,YAAYsB,EAAM,CAChB,KAAKA,KAAOA,EAEZ,KAAK+lB,MAAQ9rB,KAAKS,IAChBsF,EAAKD,QAAQimB,QAAQ,CAArB,EAA0BhmB,EAAKD,QAAQimB,QAAQ,CAArB,EAA0B,EACpDT,EAFW,EAKb,KAAKU,aAAe,CAAA,CACrB,CAOD/P,WAAWhD,EAAM,CACf,GAAM,CAAElT,KAAAA,CAAF,EAAW,KAEjB,GAAIA,EAAKwB,SAAS,UAAd,EAA0B4D,iBAC5B,OAGF,GAAM,CAAE4gB,QAAAA,GAAYhmB,EAAKD,QACnB6X,EAAY1E,IAASpZ,OAAY,GAAQoZ,GAAQ,EACnDqB,EAGJ,IAAKA,EAAI,EAAGA,GAAKyR,EAAQ,CAAD,EAAKzR,IAC3B,KAAK2R,iBAAiBlmB,EAAKuD,WAAaqU,EAAYrD,EAAK,CAACA,EAA1D,EAIF,IAAKA,EAAI,EAAGA,GAAKyR,EAAQ,CAAD,EAAKzR,IAC3B,KAAK2R,iBAAiBlmB,EAAKuD,WAAaqU,EAAa,CAACrD,EAAKA,EAA3D,CAEH,CAKD2R,iBAAiBC,EAAc,CAC7B,IAAM1lB,EAAQ,KAAKT,KAAKkV,eAAeiR,CAAzB,EAEVtiB,EAAU,KAAKuiB,kBAAkB3lB,CAAvB,EACToD,IAEHA,EAAU+hB,GAAcnlB,EAAO,KAAKT,IAAb,EAEnB6D,GACF,KAAKwiB,WAAWxiB,CAAhB,EAGL,CAMDE,kBAAkB5C,EAAO,CACvB,IAAI0C,EAAU,KAAKuiB,kBAAkBjlB,EAAMV,KAA7B,EACd,OAAKoD,IAEHA,EAAU,KAAK7D,KAAKylB,sBAAsBtkB,EAAMS,KAAMT,EAAMV,KAAlD,EACV,KAAK4lB,WAAWxiB,CAAhB,GAIFA,EAAQugB,SAASjjB,CAAjB,EAEO0C,CACR,CAKDwiB,WAAWxiB,EAAS,CAKlB,GAHA,KAAKyiB,cAAcziB,EAAQpD,KAA3B,EACA,KAAKwlB,aAAarmB,KAAKiE,CAAvB,EAEI,KAAKoiB,aAAalT,OAAS,KAAKgT,MAAO,CAEzC,IAAMQ,EAAgB,KAAKN,aAAavT,UAAW8T,GAC1C,CAACA,EAAK1D,YAAc,CAAC0D,EAAKlhB,QADb,EAGlBihB,IAAkB,IACA,KAAKN,aAAapT,OAAO0T,EAAe,CAAxC,EAA2C,CAA3C,EACRlhB,QAAZ,CAEH,CACF,CAODihB,cAAc7lB,EAAO,CACnB,IAAM8lB,EAAgB,KAAKN,aAAavT,UAAU8T,GAAQA,EAAK/lB,QAAUA,CAAnD,EAClB8lB,IAAkB,IACpB,KAAKN,aAAapT,OAAO0T,EAAe,CAAxC,CAEH,CAMDH,kBAAkB3lB,EAAO,CACvB,OAAO,KAAKwlB,aAAaQ,KAAK5iB,GAAWA,EAAQpD,QAAUA,CAApD,CACR,CAED4E,SAAU,CACR,KAAK4gB,aAAa7mB,QAAQyE,GAAWA,EAAQwB,QAAR,CAArC,EACA,KAAK4gB,aAAe,CAAA,CACrB,CAxHiB,EClEdS,EAAN,cAA6B3F,CAAU,CAMrCpM,aAAc,CAAA,IAAAgS,EACZ,IAAIC,EAAW,EACTC,GAAaF,EAAA,KAAK5mB,WAAR,MAAA4mB,IAAA,OAAA,OAAGA,EAAcE,WAE7BA,GAAc,WAAYA,EAE5BD,EAAWC,EAAW9T,OACb8T,GAAc,YAAaA,IAE/BA,EAAWpI,QACdoI,EAAWpI,MAAQ,KAAKqI,uBAAuBD,EAAWE,OAAvC,GAGjBF,EAAWpI,QACbmI,EAAWC,EAAWpI,MAAM1L,SAKhC,IAAM3F,EAAQ,KAAK5L,SAAS,WAAY,CACtCqlB,WAAAA,EACAD,SAAAA,CAFsC,CAA1B,EAId,OAAO,KAAKrU,aAAa,WAAYnF,EAAMwZ,SAAUC,CAA9C,CACR,CAODpB,sBAAsBziB,EAAWvC,EAAO,CACtC,OAAO,IAAIkiB,EAAQ3f,EAAW,KAAMvC,CAA7B,CACR,CAYDolB,YAAYplB,EAAO,CAAA,IAAAumB,EACjB,IAAMH,GAAaG,EAAA,KAAKjnB,WAAR,MAAAinB,IAAA,OAAA,OAAGA,EAAcH,WAE7BI,EAAiB,CAAA,EACjBvpB,MAAMC,QAAQkpB,CAAd,EAEFI,EAAiBJ,EAAWpmB,CAAD,EAClBomB,GAAc,YAAaA,IAM/BA,EAAWpI,QACdoI,EAAWpI,MAAQ,KAAKqI,uBAAuBD,EAAWE,OAAvC,GAGrBE,EAAiBJ,EAAWpI,MAAMhe,CAAjB,GAGnB,IAAID,EAAWymB,EAEXzmB,aAAoBhD,UACtBgD,EAAW,KAAK0mB,sBAAsB1mB,CAA3B,GAKb,IAAM4M,EAAQ,KAAK5L,SAAS,WAAY,CACtChB,SAAUA,GAAY,CAAA,EACtBC,MAAAA,CAFsC,CAA1B,EAKd,OAAO,KAAK8R,aAAa,WAAYnF,EAAM5M,SAAUC,CAA9C,CACR,CASDqmB,uBAAuBK,EAAgB,CAAA,IAAAC,EAAAC,EACrC,OAAID,EAAA,KAAKrnB,WAAL,MAAAqnB,IAAA,QAAAA,EAAcE,WAAdD,EAA0B,KAAKtnB,WAA/B,MAAAsnB,IAAA,QAA0BA,EAAcE,cACnCpqB,GACL,KAAK4C,QAAQunB,SACb,KAAKvnB,QAAQwnB,cACbJ,CAH0B,GAIvB,CAAA,EAGA,CAACA,CAAD,CACR,CAQDD,sBAAsBlhB,EAAS,CAE7B,IAAMxF,EAAW,CACfwF,QAAAA,GAGIwhB,EACJxhB,EAAQ7M,UAAY,IAChB6M,EACAA,EAAQ0a,cAAc,GAAtB,EAGN,GAAI8G,EAAQ,CAGVhnB,EAASgiB,IAAMgF,EAAO9C,QAAQ+C,SAAWD,EAAOE,KAE5CF,EAAO9C,QAAQiD,aACjBnnB,EAASyjB,OAASuD,EAAO9C,QAAQiD,YAGnCnnB,EAAS9E,MAAQ8rB,EAAO9C,QAAQkD,UAAYhD,SAAS4C,EAAO9C,QAAQkD,UAAW,EAA3B,EAAiC,EACrFpnB,EAAS7E,OAAS6rB,EAAO9C,QAAQmD,WAAajD,SAAS4C,EAAO9C,QAAQmD,WAAY,EAA5B,EAAkC,EAGxFrnB,EAAShF,EAAIgF,EAAS9E,MACtB8E,EAAS/E,EAAI+E,EAAS7E,OAElB6rB,EAAO9C,QAAQoD,WACjBtnB,EAAS1B,KAAO0oB,EAAO9C,QAAQoD,UAGjC,IAAMC,EAAc/hB,EAAQ0a,cAAc,KAAtB,EAEpB,GAAIqH,EAAa,CAAA,IAAAC,EAGfxnB,EAASkjB,KAAOqE,EAAYE,YAAcF,EAAYvF,IACtDhiB,EAAS+hB,KAATyF,EAAeD,EAAYG,aAAa,KAAzB,KAAf,MAAAF,IAAA,OAAAA,EAAkD,EACnD,EAEGR,EAAO9C,QAAQyD,aAAeX,EAAO9C,QAAQ0D,WAC/C5nB,EAASmgB,aAAe,GAE3B,CAED,OAAO,KAAKpO,aAAa,cAAe/R,EAAUwF,EAASwhB,CAApD,CACR,CASDhC,aAAahlB,EAAUC,EAAO,CAC5B,OAAO+kB,GAAahlB,EAAU,KAAMC,CAAjB,CACpB,CA1KoC,ECGjC4nB,EAAc,KAOdC,EAAN,KAAa,CAIX5pB,YAAYsB,EAAM,CAChB,KAAKA,KAAOA,EACZ,KAAKuoB,SAAW,GAChB,KAAK3kB,OAAS,GACd,KAAKwb,UAAY,GACjB,KAAKoJ,UAAY,GAKjB,KAAKC,UAAY3uB,OAEjB,KAAK4uB,cAAgB,GAErB,KAAKC,aAAe,GAEpB,KAAKC,oBAAsB,GAE3B,KAAKC,kBAAoB,GAKzB,KAAKC,aAAehvB,OAKpB,KAAKivB,gBAAkBjvB,OAKvB,KAAKkvB,gBAAkBlvB,OAKvB,KAAKmvB,gBAAkBnvB,OAMvB,KAAKovB,aAAepvB,OAGpB,KAAKqvB,aAAe,KAAKA,aAAalZ,KAAK,IAAvB,EAGpBjQ,EAAK6P,GAAG,eAAgB,KAAKsZ,YAA7B,CACD,CAEDC,MAAO,CACL,KAAKD,aAAL,EACA,KAAK/O,OAAL,CACD,CAEDhQ,OAAQ,CACN,GAAI,KAAKme,UAAY,KAAKnJ,WAAa,KAAKoJ,UAI1C,OAGF,IAAMrnB,EAAQ,KAAKnB,KAAK8H,UAExB,KAAKlE,OAAS,GACd,KAAK4kB,UAAY,GACjB,KAAKpJ,UAAY,GACjB,KAAKqJ,UAAY,KAAKzoB,KAAKD,QAAQspB,sBAE/BloB,GAASA,EAAMC,cAAgBD,EAAMzF,OAAS,KAAKsE,KAAKD,QAAQupB,oBAClE,KAAKb,UAAY,GAGnB,KAAKc,iBAAL,EACApX,WAAW,IAAM,CACf,KAAKiI,OAAL,CACD,EAAE,KAAKuO,aAAe,GAAK,CAFlB,CAGX,CAGDQ,cAAe,CAEb,GADA,KAAKnpB,KAAKgiB,IAAI,eAAgB,KAAKmH,YAAnC,EACI,CAAC,KAAKX,UAAW,CACnB,IAAMrnB,EAAQ,KAAKnB,KAAK8H,UACxB,KAAK0gB,UAAY,GACjB,KAAKpJ,UAAY,GACjB,KAAKqJ,UAAY,KAAKzoB,KAAKD,QAAQypB,sBAC/BroB,GAASA,EAAM4B,WAAWT,QAAUnB,EAAMzF,OAAS,KAAKsE,KAAKD,QAAQupB,oBACvE,KAAKb,UAAY,GAEnB,KAAKc,iBAAL,CACD,CACF,CAGDA,kBAAmB,CACjB,GAAM,CAAEvpB,KAAAA,CAAF,EAAW,KACXmB,EAAQ,KAAKnB,KAAK8H,UAClB,CAAE/H,QAAAA,CAAF,EAAcC,EAyBpB,GAvBID,EAAQ0pB,wBAA0B,QACpC1pB,EAAQ2pB,gBAAkB,GAC1B,KAAKR,aAAepvB,QACXiG,EAAQ0pB,wBAA0B,QAC3C1pB,EAAQ2pB,gBAAkB,GAC1B,KAAKjB,UAAY,EACjB,KAAKS,aAAepvB,QACX,KAAK0uB,WAAaxoB,EAAK2pB,oBAEhC,KAAKT,aAAelpB,EAAK2pB,oBAEzB,KAAKT,aAAe,KAAKlpB,KAAKogB,eAAV,EAGtB,KAAK0I,aAAe3nB,GAAO0E,sBAAP,EAEpB7F,EAAKuG,WAAWqC,QAAhB,EAGA,KAAK8f,cAAgB9gB,GAAQ,KAAK6gB,WAAa,KAAKA,UAAY,IAChE,KAAKmB,aAAehiB,EAAQ,KAAKshB,cACV/nB,GAAO0C,QAAQwf,eAAf,IACC,CAAC,KAAKjE,WAAa,CAACpf,EAAKkF,WAAWC,UAAhB,GACxC,CAAC,KAAKykB,aACR,KAAKhB,oBAAsB,GAEvB,KAAKJ,WAAarnB,IACpBA,EAAM4D,oBAAN,EACA5D,EAAM6D,oBAAN,OAEG,CAAA,IAAA6kB,EACL,KAAKjB,qBAAsB7oB,EAAAA,EAAQ2pB,mBAAnC,MAAAG,IAAA,OAAAA,EAAsD,EACvD,CAID,GAHA,KAAKhB,kBAAoB,CAAC,KAAKD,qBAAuB,KAAK5oB,KAAKD,QAAQoJ,UAAYkf,EACpF,KAAKU,gBAAkB,KAAKH,oBAAsB5oB,EAAKgG,QAAUhG,EAAK8pB,GAElE,CAAC,KAAKpB,cAAe,CACvB,KAAKD,UAAY,EACjB,KAAKmB,aAAe,GACpB,KAAKf,kBAAoB,GACzB,KAAKD,oBAAsB,GACvB,KAAKJ,YACHxoB,EAAKgG,UACPhG,EAAKgG,QAAQjL,MAAMgvB,QAAUjF,OAAOuD,CAAD,GAErCroB,EAAKqJ,eAAe,CAApB,GAEF,MACD,CAED,GAAI,KAAKugB,cAAgB,KAAKV,cAAgB,KAAKA,aAAa/I,UAAW,CAAA,IAAA3U,EAEzE,KAAKmd,aAAe,GACpB,KAAKK,gBAAkB,KAAKhpB,KAAKgE,UACjC,KAAKilB,iBAALzd,EAAuB,KAAKxL,KAAK8H,aAAjC,MAAA0D,IAAA,OAAA,OAAuBA,EAAqBvH,cAExCjE,EAAKgE,YACPhE,EAAKgE,UAAUjJ,MAAMivB,SAAW,SAChChqB,EAAKgE,UAAUjJ,MAAMW,MAAQsE,EAAKO,aAAa5G,EAAI,KAEtD,MACC,KAAKgvB,aAAe,GAGlB,KAAKH,WAEH,KAAKI,qBACH5oB,EAAKgG,UACPhG,EAAKgG,QAAQjL,MAAMgvB,QAAUjF,OAAOuD,CAAD,GAErCroB,EAAKqJ,eAAe,CAApB,IAEI,KAAKwf,mBAAqB7oB,EAAK8pB,KACjC9pB,EAAK8pB,GAAG/uB,MAAMgvB,QAAUjF,OAAOuD,CAAD,GAE5BroB,EAAKgG,UACPhG,EAAKgG,QAAQjL,MAAMgvB,QAAU,MAI7B,KAAKH,eACP,KAAKK,uBAAL,EACI,KAAKnB,eAEP,KAAKA,aAAa/tB,MAAMmvB,WAAa,YAIrC,KAAKpB,aAAa/tB,MAAMgvB,QAAUjF,OAAOuD,CAAD,KAGnC,KAAKjJ,YAGVpf,EAAKkF,WAAW6O,YAAY,CAA5B,IACF/T,EAAKkF,WAAW6O,YAAY,CAA5B,EAA+B1a,GAAG0B,MAAM0Z,QAAU,QAEhDzU,EAAKkF,WAAW6O,YAAY,CAA5B,IACF/T,EAAKkF,WAAW6O,YAAY,CAA5B,EAA+B1a,GAAG0B,MAAM0Z,QAAU,QAGhD,KAAKkU,cACH3oB,EAAKkF,WAAWvL,IAAM,IAExBqG,EAAKkF,WAAWmP,cAAhB,EACArU,EAAKkF,WAAWK,OAAhB,GAIP,CAGD6U,QAAS,CACH,KAAKoO,WACF,KAAKE,eACL,KAAKI,cACL,KAAKA,aAAa3vB,UAAY,MAOnC,IAAI+C,QAASC,GAAY,CACvB,IAAIguB,EAAU,GACVC,EAAa,GACjBvuB,GAA6C,KAAKitB,YAAvC,EAAsDzD,QAAQ,IAAM,CAC7E8E,EAAU,GACLC,GACHjuB,EAAQ,EAAD,EAHX,EAMAgW,WAAW,IAAM,CACfiY,EAAa,GACTD,GACFhuB,EAAQ,EAAD,GAER,EALO,EAMVgW,WAAWhW,EAAS,GAAV,CACX,CAhBD,EAgBGkpB,QAAQ,IAAM,KAAKgF,UAAL,CAhBjB,EAkBA,KAAKA,UAAL,CAEH,CAGDA,WAAY,CAAA,IAAAC,EAAAC,GACVD,EAAA,KAAKtqB,KAAKgG,WAAV,MAAAskB,IAAA,QAAAA,EAAmBvvB,MAAMyvB,YAAY,6BAA8B,KAAK/B,UAAY,IAApF,EAEA,KAAKzoB,KAAKwB,SACR,KAAKgnB,UAAY,wBAA0B,uBAD7C,EAKA,KAAKxoB,KAAKwB,SAEP,eAAiB,KAAKgnB,UAAY,KAAO,MAF5C,GAKKxoB,EAAAA,KAAAA,KAAKgG,WAAS0H,MAAAA,IAAAA,QAAAA,EAAAA,UAAUY,OAAO,mBAAoB,KAAKka,SAA7D,EAEI,KAAKA,WACH,KAAKM,eAEP,KAAKA,aAAa/tB,MAAMgvB,QAAU,KAEpC,KAAKU,oBAAL,GACS,KAAKrL,WACd,KAAKsL,sBAAL,EAGG,KAAKhC,eACR,KAAKiC,qBAAL,CAEH,CAGDA,sBAAuB,CACrB,GAAM,CAAE3qB,KAAAA,CAAF,EAAW,KAgBjB,GAfA,KAAK4D,OAAS,KAAK4kB,UACnB,KAAKD,SAAW,KAAKnJ,UACrB,KAAKoJ,UAAY,GACjB,KAAKpJ,UAAY,GAEjBpf,EAAKwB,SACH,KAAKoC,OAAS,sBAAwB,qBADxC,EAKA5D,EAAKwB,SAEF,eAAiB,KAAKoC,OAAS,QAAU,SAF5C,EAKI,KAAK2kB,SACPvoB,EAAKqF,QAAL,UACS,KAAKzB,OAAQ,CAAA,IAAA+Z,EAClB,KAAKiM,cAAgB5pB,EAAKgE,YAC5BhE,EAAKgE,UAAUjJ,MAAMivB,SAAW,UAChChqB,EAAKgE,UAAUjJ,MAAMW,MAAQ,SAE/BiiB,EAAA3d,EAAK8H,aAAL,MAAA6V,IAAA,QAAAA,EAAgB3Y,oBAAhB,CACD,CACF,CAGDylB,qBAAsB,CACpB,GAAM,CAAEzqB,KAAAA,CAAF,EAAW,KACb,KAAK4pB,eACH,KAAKjB,cAAgB,KAAKK,iBAAmB,KAAKC,kBACpD,KAAK2B,WAAW,KAAK5B,gBAAiB,YAAa,oBAAnD,EACA,KAAK4B,WAAW,KAAK3B,gBAAiB,YAAa,MAAnD,GAGEjpB,EAAK8H,YACP9H,EAAK8H,UAAU/C,oBAAf,EACA,KAAK6lB,WACH5qB,EAAK8H,UAAU9D,UACf,YACAhE,EAAK8H,UAAUb,oBAAf,CAHF,IAQA,KAAK4hB,mBAAqB7oB,EAAK8pB,IACjC,KAAKc,WAAW5qB,EAAK8pB,GAAI,UAAWhF,OAAO9kB,EAAKD,QAAQoJ,SAAd,CAA1C,EAGE,KAAKyf,qBAAuB5oB,EAAKgG,SACnC,KAAK4kB,WAAW5qB,EAAKgG,QAAS,UAAW,GAAzC,CAEH,CAGD0kB,uBAAwB,CACtB,GAAM,CAAE1qB,KAAAA,CAAF,EAAW,KAEb,KAAK4pB,cACP,KAAKK,uBAAuB,EAA5B,EAIE,KAAKpB,mBAAqB7oB,EAAKmJ,UAAY,KAAQnJ,EAAK8pB,IAC1D,KAAKc,WAAW5qB,EAAK8pB,GAAI,UAAW,GAApC,EAGE,KAAKlB,qBAAuB5oB,EAAKgG,SACnC,KAAK4kB,WAAW5qB,EAAKgG,QAAS,UAAW,GAAzC,CAEH,CAMDikB,uBAAuBrV,EAAS,CAC9B,GAAI,CAAC,KAAKsU,aAAc,OAExB,GAAM,CAAElpB,KAAAA,CAAF,EAAW,KACX,CAAEmgB,UAAAA,CAAF,EAAgB,KAAK+I,aACrB,CAAEphB,UAAAA,EAAWvH,aAAAA,CAAb,EAA8BP,EAEpC,GAAI,KAAK2oB,cAAgBxI,GAAa,KAAK6I,iBAAmB,KAAKC,gBAAiB,CAClF,IAAM4B,EAAmB,CAACtqB,EAAa5G,GAAK,KAAKuvB,aAAavvB,EAAIwmB,EAAUxmB,GAAKwmB,EAAU3kB,EACrFsvB,EAAmB,CAACvqB,EAAa3G,GAAK,KAAKsvB,aAAatvB,EAAIumB,EAAUvmB,GAAKumB,EAAU1kB,EACrFsvB,EAAmBxqB,EAAa5G,EAAIwmB,EAAU3kB,EAC9CwvB,EAAmBzqB,EAAa3G,EAAIumB,EAAU1kB,EAGhDmZ,GACF,KAAKgW,WACH,KAAK5B,gBACL,YACAruB,EAAkBkwB,EAAkBC,CAAnB,CAHnB,EAMA,KAAKF,WACH,KAAK3B,gBACL,YACAtuB,EAAkBowB,EAAkBC,CAAnB,CAHnB,IAMAlwB,EAAa,KAAKkuB,gBAAiB6B,EAAkBC,CAAzC,EACZhwB,EAAa,KAAKmuB,gBAAiB8B,EAAkBC,CAAzC,EAEf,CAEGljB,IACFtO,EAAesO,EAAUrE,IAAK0c,GAAa,KAAK+I,YAAlC,EACdphB,EAAU1G,cAAgB,KAAK8nB,aAAa1tB,EAAIsM,EAAUpM,MACtDkZ,EACF,KAAKgW,WAAW9iB,EAAU9D,UAAW,YAAa8D,EAAUb,oBAAV,CAAlD,EAEAa,EAAU9C,oBAAV,EAGL,CAQD4lB,WAAW/rB,EAAQ1D,EAAMN,EAAW,CAClC,GAAI,CAAC,KAAK4tB,UAAW,CACnB5pB,EAAO9D,MAAMI,CAAb,EAAqBN,EACrB,MACD,CAED,GAAM,CAAE0L,WAAAA,CAAF,EAAiB,KAAKvG,KAEtBirB,EAAY,CAChB7vB,SAAU,KAAKqtB,UACfthB,OAAQ,KAAKnH,KAAKD,QAAQoH,OAC1BD,WAAY,IAAM,CACXX,EAAW4T,iBAAiBpH,QAC/B,KAAK4X,qBAAL,GAGJ9rB,OAAAA,GAEFosB,EAAU9vB,CAAD,EAASN,EAClB0L,EAAWO,gBAAgBmkB,CAA3B,CACD,CAhbU,EC4MPC,GAAiB,CACrBhgB,eAAgB,GAChBgJ,QAAS,GACT0I,KAAM,GACNpQ,aAAc,GACdxD,oBAAqB,GACrBqgB,sBAAuB,IACvBG,sBAAuB,IACvBniB,sBAAuB,IACvByQ,OAAQ,GACRC,UAAW,GACXb,UAAW,GACXO,YAAa,GACb6R,kBAAmB,IACnBjb,wBAAyB,GACzBkR,iBAAkB,gBAClB4L,cAAe,QACfC,UAAW,kBACXlZ,gBAAiB,OACjBiM,kBAAmB,MACnBL,eAAgB,IAChB3U,UAAW,GAEX1I,MAAO,EACP0kB,SAAU,6BACVa,QAAS,CAAC,EAAG,CAAJ,EACT7e,OAAQ,0BA1Ba,EAgCjBkkB,GAAN,cAAyB3E,CAAe,CAItChoB,YAAYqB,EAAS,CACnB,MAAA,EAEA,KAAKA,QAAU,KAAKurB,gBAAgBvrB,GAAW,CAAA,CAAhC,EAOf,KAAKsT,OAAS,CAAE1Z,EAAG,EAAGC,EAAG,GAMzB,KAAK2xB,kBAAoB,CAAE5xB,EAAG,EAAGC,EAAG,GAOpC,KAAK2G,aAAe,CAAE5G,EAAG,EAAGC,EAAG,GAK/B,KAAKuP,UAAY,EACjB,KAAK5F,UAAY,EACjB,KAAKwR,eAAiB,EACtB,KAAKnR,OAAS,GACd,KAAK4nB,aAAe,GACpB,KAAKC,SAAW,GAMhB,KAAKC,iBAAmB,CAAA,EAExB,KAAK/B,oBAAsB7vB,OAG3B,KAAK2iB,OAAS3iB,OAEd,KAAKkM,QAAUlM,OAEf,KAAKke,SAAWle,OAEhB,KAAKkK,UAAYlK,OAEjB,KAAKiW,WAAajW,OAElB,KAAKgO,UAAYhO,OAEjB,KAAKgW,OAAS,IAAIrR,EAClB,KAAK8H,WAAa,IAAI2T,EACtB,KAAKhV,WAAa,IAAIwO,EAAW,IAAf,EAClB,KAAKjL,SAAW,IAAIiG,EAAS,IAAb,EAChB,KAAK/K,OAAS,IAAI2kB,EAAO,IAAX,EACd,KAAKqD,SAAW,IAAI3U,EAAS,IAAb,EAChB,KAAKlT,cAAgB,IAAIgiB,EAAc,IAAlB,CACtB,CAGDnH,MAAO,CACL,GAAI,KAAK/a,QAAU,KAAK4nB,aACtB,MAAO,GAGT,KAAK5nB,OAAS,GACd,KAAKpC,SAAS,MAAd,EACA,KAAKA,SAAS,YAAd,EAEA,KAAKoqB,qBAAL,EAGA,IAAIC,EAAc,aAClB,OAAI,KAAKpjB,SAAS0G,gBAChB0c,GAAe,gBAEb,KAAK9rB,QAAQ+rB,YACfD,GAAe,IAAM,KAAK9rB,QAAQ+rB,WAEhC,KAAK9lB,UACP,KAAKA,QAAQ9M,WAAa,IAAM2yB,GAGlC,KAAKtoB,UAAY,KAAKxD,QAAQU,OAAS,EACvC,KAAKsU,eAAiB,KAAKxR,UAC3B,KAAK/B,SAAS,aAAd,EAGA,KAAKuqB,YAAc,IAAIrR,EAAY,IAAhB,GAGf1Z,OAAOgrB,MAAM,KAAKzoB,SAAlB,GACG,KAAKA,UAAY,GACjB,KAAKA,WAAa,KAAKoR,YAAL,KACvB,KAAKpR,UAAY,GAGd,KAAKkF,SAAS0G,eAEjB,KAAK6B,cAAL,EAIF,KAAKib,WAAL,EAEA,KAAK5Y,OAAOzZ,EAAIwE,OAAO8tB,YAEvB,KAAKR,iBAAmB,KAAK7F,YAAY,KAAKtiB,SAAtB,EACxB,KAAK/B,SAAS,cAAe,CAC3Bf,MAAO,KAAK8C,UACZ3B,KAAM,KAAK8pB,iBACXvqB,MAAOrH,MAHoB,CAA7B,EAOA,KAAK6vB,oBAAsB,KAAKvJ,eAAL,EAC3B,KAAK5e,SAAS,eAAd,EAEA,KAAKqO,GAAG,sBAAuB,IAAM,CACnC,GAAM,CAAEkE,YAAAA,GAAgB,KAAK7O,WAGzB6O,EAAY,CAAD,IACbA,EAAY,CAAD,EAAI1a,GAAG0B,MAAM0Z,QAAU,QAClC,KAAKsB,WAAWhC,EAAY,CAAD,EAAK,KAAKxQ,UAAY,CAAjD,GAEEwQ,EAAY,CAAD,IACbA,EAAY,CAAD,EAAI1a,GAAG0B,MAAM0Z,QAAU,QAClC,KAAKsB,WAAWhC,EAAY,CAAD,EAAK,KAAKxQ,UAAY,CAAjD,GAGF,KAAKuB,YAAL,EAEA,KAAKhB,cAAcoS,WAAnB,EAEA,KAAKpG,OAAOlR,IAAIR,OAAQ,SAAU,KAAK+tB,kBAAkBlc,KAAK,IAA5B,CAAlC,EACA,KAAKH,OAAOlR,IAAIR,OAAQ,SAAU,KAAKguB,wBAAwBnc,KAAK,IAAlC,CAAlC,EACA,KAAKzO,SAAS,YAAd,CACD,CApBD,EAuBI,KAAK0D,WAAW6O,YAAY,CAA5B,GACF,KAAKgC,WAAW,KAAK7Q,WAAW6O,YAAY,CAA5B,EAAgC,KAAKxQ,SAArD,EAEF,KAAK/B,SAAS,QAAd,EAEA,KAAKmC,OAAOylB,KAAZ,EAEA,KAAK5nB,SAAS,WAAd,EAEO,EACR,CASD0T,eAAezU,EAAO,CACpB,IAAMuU,EAAY,KAAKL,YAAL,EAElB,OAAI,KAAK5U,QAAQ6c,OACXnc,EAAQuU,EAAY,IACtBvU,GAASuU,GAGPvU,EAAQ,IACVA,GAASuU,IAINza,EAAMkG,EAAO,EAAGuU,EAAY,CAAvB,CACb,CAEDlQ,aAAc,CACZ,KAAKI,WAAW6O,YAAY3U,QAASgV,GAAe,CAAA,IAAAiY,GAClDA,EAAAjY,EAAWjT,SAAX,MAAAkrB,IAAA,QAAAA,EAAkBvnB,YAAlB,EADF,CAGD,CAMDwnB,KAAK7rB,EAAO,CACV,KAAKyE,WAAW0E,YACd,KAAKsL,eAAezU,CAApB,EAA6B,KAAKsU,cADpC,CAGD,CAKDwX,MAAO,CACL,KAAKD,KAAK,KAAKvX,eAAiB,CAAhC,CACD,CAKDyX,MAAO,CACL,KAAKF,KAAK,KAAKvX,eAAiB,CAAhC,CACD,CAOD9O,UAAU0b,EAAM,CAAA,IAAA8K,GACdA,EAAA,KAAK3kB,aAAL,MAAA2kB,IAAA,QAAAA,EAAgBxmB,OAAO,GAAG0b,CAA1B,CACD,CAKDva,YAAa,CAAA,IAAAslB,GACN5kB,EAAAA,KAAAA,aAAL,MAAA4kB,IAAA,QAAAA,EAAgBtlB,WAAhB,CACD,CAMDgD,OAAQ,CACF,CAAC,KAAKzG,OAAOC,QAAU,KAAK4nB,eAIhC,KAAKA,aAAe,GAEpB,KAAKhqB,SAAS,OAAd,EAEA,KAAKsO,OAAO3Q,UAAZ,EACA,KAAKwE,OAAOyG,MAAZ,EACD,CASD/E,SAAU,CAAA,IAAAod,EACR,GAAI,CAAC,KAAK+I,aAAc,CACtB,KAAKzrB,QAAQ0pB,sBAAwB,OACrC,KAAKrf,MAAL,EACA,MACD,CAED,KAAK5I,SAAS,SAAd,EAEA,KAAKwf,WAAa,CAAA,EAEd,KAAKjR,aACP,KAAKA,WAAWI,YAAc,KAC9B,KAAKJ,WAAWK,WAAa,OAG1BpK,EAAAA,KAAAA,WAAL,MAAAyc,IAAA,QAAAA,EAAcvjB,OAAd,EAEA,KAAKgG,WAAW6O,YAAY3U,QAASgV,GAAe,CAAA,IAAAuY,GAClDA,EAAAvY,EAAWjT,SAAX,MAAAwrB,IAAA,QAAAA,EAAkBtnB,QAAlB,EADF,EAIA,KAAKvB,cAAcuB,QAAnB,EACA,KAAKyK,OAAO3Q,UAAZ,CACD,CAODytB,oBAAoBC,EAAY,CAC9B,KAAK/oB,cAAcwiB,cAAcuG,CAAjC,EACA,KAAK3nB,WAAW6O,YAAY3U,QAAQ,CAACgV,EAAYG,IAAM,CAAA,IAAAuY,EAAAC,EACrD,IAAIC,IAAwBF,GAAAC,EAAA,KAAKjlB,aAAN,MAAAilB,IAAA,OAAA,OAACA,EAAgBtsB,SAAS,MAAAqsB,IAAA,OAAAA,EAAA,GAAK,EAAIvY,EAI9D,GAHI,KAAKU,QAAL,IACF+X,EAAuB,KAAK9X,eAAe8X,CAApB,GAErBA,IAAyBH,IAE3B,KAAK9W,WAAW3B,EAAYyY,EAAY,EAAxC,EAGItY,IAAM,GAAG,CAAA,IAAA0Y,EACX,KAAKnlB,UAAYsM,EAAWjT,OAC5B8rB,EAAA7Y,EAAWjT,SAAOmD,MAAAA,IAAAA,QAAAA,EAAAA,YAAY,EAA9B,CACD,EAbL,EAiBA,KAAK9C,SAAS,QAAd,CACD,CAUDuU,WAAWmX,EAAQzsB,EAAOgF,EAAO,CAK/B,GAJI,KAAKwP,QAAL,IACFxU,EAAQ,KAAKyU,eAAezU,CAApB,GAGNysB,EAAO/rB,MAAO,CAChB,GAAI+rB,EAAO/rB,MAAMV,QAAUA,GAAS,CAACgF,EAGnC,OAIFynB,EAAO/rB,MAAMkE,QAAb,EACA6nB,EAAO/rB,MAAQrH,MAChB,CAGD,GAAI,CAAC,KAAKmb,QAAL,IAAmBxU,EAAQ,GAAKA,GAAS,KAAKkU,YAAL,GAC5C,OAGF,IAAMnU,EAAW,KAAKqlB,YAAYplB,CAAjB,EACjBysB,EAAO/rB,MAAQ,IAAIkC,EAAM7C,EAAUC,EAAO,IAA3B,EAGXA,IAAU,KAAK8C,YACjB,KAAKuE,UAAYolB,EAAO/rB,OAG1B+rB,EAAO/rB,MAAMsD,OAAOyoB,EAAO7zB,EAA3B,CACD,CAGDkO,wBAAyB,CACvB,MAAO,CACL5N,EAAG,KAAK4G,aAAa5G,EAAI,EACzBC,EAAG,KAAK2G,aAAa3G,EAAI,EAE5B,CAQDqyB,WAAWxmB,EAAO,CAIhB,GAAI,KAAK+lB,aAGP,OAMF,IAAMtrB,EAAkBJ,GAAgB,KAAKC,QAAS,IAAf,EAEnC,CAAC0F,GAASnL,EAAY4F,EAAiB,KAAKqrB,iBAAvB,IAOzB/xB,EAAe,KAAK+xB,kBAAmBrrB,CAAzB,EAEd,KAAKsB,SAAS,cAAd,EAEAhI,EAAe,KAAK+G,aAAc,KAAKgrB,iBAAzB,EAEd,KAAKa,wBAAL,EAEA,KAAK5qB,SAAS,cAAd,EAIA,KAAK0D,WAAWK,OAAO,KAAK5B,OAAOC,MAAnC,EAEI,CAAC,KAAK6nB,UAAYrtB,OAAO+uB,WAAW,oBAAlB,EAAwC1M,SAC5D,KAAKzP,cAAL,EAGF,KAAKxP,SAAS,QAAd,EACD,CAKD6H,eAAe0gB,EAAS,CACtB,KAAK5gB,UAAYlP,KAAKS,IAAIqvB,EAAS,CAAlB,EACb,KAAKD,KACP,KAAKA,GAAG/uB,MAAMgvB,QAAUjF,OAAO,KAAK3b,UAAY,KAAKpJ,QAAQoJ,SAA/B,EAEjC,CAKD6H,eAAgB,CACd,GAAI,CAAC,KAAKya,SAAU,CAAA,IAAA2B,EAClB,KAAK3B,SAAW,IAChB2B,EAAA,KAAKpnB,WAAS0H,MAAAA,IAAAA,QAAAA,EAAAA,UAAU9O,IAAI,iBAA5B,CACD,CACF,CAODutB,mBAAoB,CAClB,KAAKF,WAAL,EAOI,oBAAoBoB,KAAKjvB,OAAOJ,UAAUsvB,SAA1C,GACFnb,WAAW,IAAM,CACf,KAAK8Z,WAAL,GACC,GAFO,CAIb,CASDG,yBAA0B,CACxB,KAAKmB,gBAAgB,EAAGnvB,OAAO8tB,WAA/B,CACD,CAMDqB,gBAAgB5zB,EAAGC,EAAG,CACpB,KAAKyZ,OAAO1Z,EAAIA,EAChB,KAAK0Z,OAAOzZ,EAAIA,EAChB,KAAK4H,SAAS,oBAAd,CACD,CAQDoqB,sBAAuB,CAErB,KAAK5lB,QAAU/M,EAAc,OAAQ,KAAT,EAC5B,KAAK+M,QAAQwO,aAAa,WAAY,IAAtC,EACA,KAAKxO,QAAQwO,aAAa,OAAQ,QAAlC,EAGA,KAAKwD,SAAW,KAAKhS,QAIrB,KAAK8jB,GAAK7wB,EAAc,WAAY,MAAO,KAAK+M,OAAzB,EACvB,KAAK+J,WAAa9W,EAAc,oBAAqB,UAAW,KAAK+M,OAAtC,EAC/B,KAAKhC,UAAY/K,EAAc,kBAAmB,MAAO,KAAK8W,UAAhC,EAG9B,KAAKA,WAAWyE,aAAa,uBAAwB,UAArD,EACA,KAAKxQ,UAAUwQ,aAAa,YAAa,KAAzC,EACA,KAAKxQ,UAAUwQ,aAAa,KAAM,aAAlC,EAEA,KAAKtP,WAAWoP,cAAhB,EAEA,KAAKyJ,GAAK,IAAIO,EAAG,IAAP,EACV,KAAKP,GAAGY,KAAR,GAGC,KAAK5e,QAAQ3G,YAAcE,SAASk0B,MAAMj0B,YAAY,KAAKyM,OAA5D,CACD,CAWDoa,gBAAiB,CACf,OAAOA,GACL,KAAK7c,UACL,KAAKuE,UAAY,KAAKA,UAAUlG,KAAO,KAAK8pB,iBAC5C,IAHmB,CAKtB,CAMDzW,SAAU,CACR,OAAQ,KAAKlV,QAAQ6c,MAAQ,KAAKjI,YAAL,EAAqB,CACnD,CAOD2W,gBAAgBvrB,EAAS,CACvB,OAAI3B,OAAO+uB,WAAW,0CAAlB,EAA8D1M,UAChE1gB,EAAQ0pB,sBAAwB,OAChC1pB,EAAQsH,sBAAwB,GAI3B,CACL,GAAG6jB,GACH,GAAGnrB,EAEN,CAhiBqC",
  "names": ["createElement", "className", "tagName", "appendToEl", "el", "document", "appendChild", "equalizePoints", "p1", "p2", "x", "y", "id", "undefined", "roundPoint", "p", "Math", "round", "getDistanceBetween", "abs", "sqrt", "pointsEqual", "clamp", "val", "min", "max", "toTransformString", "scale", "propValue", "setTransform", "style", "transform", "defaultCSSEasing", "setTransitionStyle", "prop", "duration", "ease", "transition", "setWidthHeight", "w", "h", "width", "height", "removeTransitionStyle", "decodeImage", "img", "decode", "catch", "complete", "Promise", "resolve", "reject", "onload", "onerror", "LOAD_STATE", "IDLE", "LOADING", "LOADED", "ERROR", "specialKeyUsed", "e", "button", "ctrlKey", "metaKey", "altKey", "shiftKey", "getElementsFromOption", "option", "legacySelector", "parent", "elements", "Element", "NodeList", "Array", "isArray", "from", "selector", "querySelectorAll", "isSafari", "navigator", "vendor", "match", "supportsPassive", "window", "addEventListener", "Object", "defineProperty", "get", "DOMEvents", "constructor", "_pool", "add", "target", "type", "listener", "passive", "_toggleListener", "remove", "removeAll", "forEach", "poolItem", "unbind", "skipPool", "methodName", "split", "eType", "filter", "push", "eventOptions", "getViewportSize", "options", "pswp", "getViewportSizeFn", "newViewportSize", "documentElement", "clientWidth", "innerHeight", "parsePaddingOption", "viewportSize", "itemData", "index", "paddingValue", "paddingFn", "padding", "legacyPropName", "toUpperCase", "slice", "Number", "getPanAreaSize", "PanBounds", "slide", "currZoomLevel", "center", "update", "_updateAxis", "dispatch", "reset", "axis", "elSize", "data", "panAreaSize", "correctPan", "panOffset", "MAX_IMAGE_WIDTH", "ZoomLevel", "elementSize", "fit", "fill", "vFill", "initial", "secondary", "maxWidth", "maxHeight", "hRatio", "vRatio", "_getInitial", "_getSecondary", "_getMax", "zoomLevels", "slideData", "_parseZoomLevelOption", "optionPrefix", "optionName", "optionValue", "Slide", "isActive", "currIndex", "currentResolution", "pan", "isFirstSlide", "opener", "isOpen", "content", "contentLoader", "getContentBySlide", "container", "holderElement", "heavyAppended", "bounds", "prevDisplayedWidth", "prevDisplayedHeight", "setIsActive", "activate", "deactivate", "append", "transformOrigin", "calculateSize", "load", "updateContentSize", "appendHeavy", "zoomAndPanToInitial", "applyCurrentZoomPan", "appendHeavyNearby", "mainScroll", "isShifted", "defaultPrevented", "destroy", "hasSlide", "resize", "panTo", "force", "scaleMultiplier", "sizeChanged", "setDisplayedSize", "getPlaceholderElement", "_this$content$placeho", "placeholder", "element", "zoomTo", "destZoomLevel", "centerPoint", "transitionDuration", "ignoreBounds", "isZoomable", "animations", "stopAllPan", "prevZoomLevel", "setZoomLevel", "calculateZoomToPanOffset", "finishTransition", "_setResolution", "startTransition", "isPan", "name", "getCurrentTransform", "onComplete", "easing", "toggleZoom", "zoomAnimationDuration", "point", "getViewportCenterPoint", "zoomFactor", "panX", "panY", "isPannable", "Boolean", "_applyZoomTransform", "currSlide", "zoom", "newResolution", "PAN_END_FRICTION", "VERTICAL_DRAG_FRICTION", "MIN_RATIO_TO_CLOSE", "MIN_NEXT_SLIDE_SPEED", "project", "initialVelocity", "decelerationRate", "DragHandler", "gestures", "startPan", "start", "stopAll", "change", "prevP1", "dragAxis", "closeOnVerticalDrag", "isMultitouch", "_setPanWithFriction", "bgOpacity", "_getVerticalDragRatio", "applyBgOpacity", "_panOrMoveMainScroll", "end", "velocity", "indexDiff", "currentSlideVisibilityRatio", "getCurrSlideX", "moveIndexBy", "correctZoomPan", "_finishPanGestureForAxis", "panPos", "restoreBgOpacity", "projectedPosition", "vDragRatio", "projectedVDragRatio", "close", "correctedPanPosition", "dampingRatio", "initialBgOpacity", "totalPanDist", "startSpring", "onUpdate", "pos", "animationProgressRatio", "floor", "delta", "newMainScrollX", "moveTo", "newPan", "allowPanToNext", "currSlideMainScrollX", "mainScrollShiftDiff", "isLeftToRight", "isRightToLeft", "_this$pswp$currSlide$", "_this$pswp$currSlide", "potentialPan", "customFriction", "UPPER_ZOOM_FRICTION", "LOWER_ZOOM_FRICTION", "getZoomPointsCenter", "ZoomHandler", "_startPan", "_startZoomPoint", "_zoomPoint", "_wasOverFitZoomLevel", "_startZoomLevel", "startP1", "startP2", "minZoomLevel", "maxZoomLevel", "pinchToClose", "_calculatePanForZoomLevel", "ignoreGesture", "destinationZoomLevel", "currZoomLevelNeedsChange", "initialPan", "destinationPan", "panNeedsChange", "naturalFrequency", "now", "newZoomLevel", "didTapOnMainContent", "event", "closest", "TapHandler", "click", "originalEvent", "targetClassList", "classList", "isImageClick", "contains", "isBackgroundClick", "_doClickOrTapAction", "tap", "doubleTap", "actionName", "_this$gestures$pswp$e", "actionFullName", "call", "clickToCloseNonZoomable", "toggle", "AXIS_SWIPE_HYSTERISIS", "DOUBLE_TAP_DELAY", "MIN_TAP_DISTANCE", "Gestures", "prevP2", "_lastStartP1", "_intervalP1", "_numActivePoints", "_ongoingPointers", "_touchEventEnabled", "_pointerEventEnabled", "PointerEvent", "supportsTouch", "maxTouchPoints", "_intervalTime", "_velocityCalculated", "isDragging", "isZooming", "raf", "_tapTimer", "drag", "tapHandler", "on", "events", "scrollWrap", "_onClick", "bind", "_bindEvents", "ontouchmove", "ontouchend", "pref", "down", "up", "cancel", "cancelEvent", "onPointerDown", "onPointerMove", "onPointerUp", "isMousePointer", "pointerType", "preventDefault", "mouseDetected", "_preventPointerEventBehaviour", "_updatePoints", "_clearTapTimer", "_calculateDragDirection", "_updateStartPoints", "Date", "_rafStopLoop", "_rafRenderLoop", "_finishDrag", "_updateVelocity", "_finishTap", "_updatePrevPoints", "requestAnimationFrame", "time", "_getVelocity", "indexOf", "tapDelay", "doubleTapAction", "setTimeout", "clearTimeout", "displacement", "cancelAnimationFrame", "applyFilters", "pointerEvent", "pointerIndex", "findIndex", "ongoingPointer", "pointerId", "splice", "_convertEventPosToPoint", "length", "touchEvent", "touches", "diff", "axisToCheck", "pageX", "offset", "pageY", "identifier", "stopPropagation", "MAIN_SCROLL_END_FRICTION", "MainScroll", "slideWidth", "_currPositionIndex", "_prevPositionIndex", "_containerShiftIndex", "itemHolders", "resizeSlides", "newSlideWidth", "spacing", "slideWidthChanged", "itemHolder", "resetPosition", "appendHolders", "i", "setAttribute", "display", "canBeSwiped", "getNumItems", "animate", "velocityX", "newIndex", "potentialIndex", "numSlides", "canLoop", "getLoopedIndex", "distance", "stopMainScroll", "destinationX", "updateCurrItem", "isMainScroll", "currDiff", "currDistance", "_this$itemHolders$", "positionDifference", "diffAbs", "tempHolder", "shift", "setContent", "pop", "unshift", "updateLazy", "dragging", "newSlideIndexOffset", "KeyboardKeyCodesMap", "Escape", "z", "ArrowLeft", "ArrowUp", "ArrowRight", "ArrowDown", "Tab", "getKeyboardEventKey", "key", "isKeySupported", "Keyboard", "_wasFocused", "trapFocus", "initialPointerPos", "_focusRoot", "_onFocusIn", "_onKeyDown", "lastActiveElement", "activeElement", "returnFocus", "focus", "keydownAction", "isForward", "keyCode", "escKey", "arrowKeys", "template", "DEFAULT_EASING", "CSSAnimation", "props", "_props$prop", "onFinish", "_target", "_onComplete", "_finished", "_onTransitionEnd", "_helperTimeout", "_finalizeAnimation", "removeEventListener", "DEFAULT_NATURAL_FREQUENCY", "DEFAULT_DAMPING_RATIO", "SpringEaser", "_dampingRatio", "_naturalFrequency", "_dampedFrequency", "easeFrame", "deltaPosition", "deltaTime", "coeff", "naturalDumpingPow", "E", "dumpedFCos", "cos", "dumpedFSin", "sin", "SpringAnimation", "_raf", "easer", "prevTime", "animationLoop", "Animations", "activeAnimations", "_start", "isSpring", "animation", "stop", "isPanRunning", "some", "ScrollWheel", "_onWheel", "deltaX", "deltaY", "wheelToZoom", "deltaMode", "clientX", "clientY", "addElementHTML", "htmlData", "isCustomSVG", "svgData", "out", "join", "size", "outlineID", "inner", "UIElement", "_container", "elementHTML", "html", "isButton", "toLowerCase", "title", "ariaLabel", "ariaText", "innerHTML", "onInit", "onClick", "onclick", "appendTo", "topBar", "initArrowButton", "isNextButton", "loop", "disabled", "arrowPrev", "order", "arrowNext", "closeButton", "zoomButton", "loadingIndicator", "indicatorElement", "isVisible", "delayTimeout", "toggleIndicatorClass", "setIndicatorVisibility", "visible", "updatePreloaderVisibility", "_pswp$currSlide", "isLoading", "_pswp$currSlide2", "preloaderDelay", "ui", "counterIndicator", "counterElement", "innerText", "indexIndicatorSep", "setZoomedIn", "isZoomedIn", "UI", "isRegistered", "uiElementsData", "items", "_lastUpdatedZoomLevel", "init", "sort", "a", "b", "uiElementData", "registerElement", "_pswp$element", "_onZoomPanUpdate", "elementData", "isClosing", "currZoomLevelDiff", "potentialZoomLevel", "imageClickAction", "getBoundsByElement", "thumbAreaRect", "getBoundingClientRect", "left", "top", "getCroppedBoundsByElement", "imageWidth", "imageHeight", "fillZoomLevel", "offsetX", "offsetY", "innerRect", "getThumbBounds", "instance", "thumbBounds", "thumbnail", "thumbSelector", "matches", "querySelector", "thumbCropped", "PhotoSwipeEvent", "details", "assign", "Eventable", "_listeners", "_filters", "addFilter", "fn", "priority", "_this$_filters$name", "_this$_filters$name2", "_this$pswp", "f1", "f2", "removeFilter", "args", "_this$_filters$name3", "apply", "_this$_listeners$name", "_this$pswp2", "off", "_this$pswp3", "_this$_listeners$name2", "Placeholder", "imageSrc", "imgEl", "decoding", "alt", "src", "_this$element", "parentNode", "Content", "displayedImageWidth", "displayedImageHeight", "isAttached", "isDecoding", "state", "removePlaceholder", "keepPlaceholder", "isLazy", "reload", "usePlaceholder", "placeholderEl", "parentElement", "prepend", "placeholderSrc", "msrc", "isImageContent", "loadImage", "_this$data$src", "_this$data$alt", "imageElement", "updateSrcsetSizes", "srcset", "onLoaded", "onError", "setSlide", "displayError", "isError", "isInitialSizeUpdate", "image", "sizesWidth", "dataset", "largestUsedSize", "parseInt", "sizes", "String", "lazyLoad", "_this$instance$option", "_this$instance$option2", "errorMsgEl", "errorMsg", "supportsDecode", "finally", "appendImage", "MIN_SLIDES_TO_CACHE", "lazyLoadData", "createContentFromData", "zoomLevel", "ceil", "lazyLoadSlide", "getItemData", "ContentLoader", "limit", "preload", "_cachedItems", "loadSlideByIndex", "initialIndex", "getContentByIndex", "addToCache", "removeByIndex", "indexToRemove", "item", "find", "PhotoSwipeBase", "_this$options", "numItems", "dataSource", "_getGalleryDOMElements", "gallery", "_this$options2", "dataSourceItem", "_domElementToItemData", "galleryElement", "_this$options3", "_this$options4", "children", "childSelector", "linkEl", "pswpSrc", "href", "pswpSrcset", "pswpWidth", "pswpHeight", "pswpType", "thumbnailEl", "_thumbnailEl$getAttri", "currentSrc", "getAttribute", "pswpCropped", "cropped", "MIN_OPACITY", "Opener", "isClosed", "isOpening", "_duration", "_useAnimation", "_croppedZoom", "_animateRootOpacity", "_animateBgOpacity", "_placeholder", "_opacityElement", "_cropContainer1", "_cropContainer2", "_thumbBounds", "_prepareOpen", "open", "hideAnimationDuration", "maxWidthToAnimate", "_applyStartProps", "showAnimationDuration", "showHideAnimationType", "showHideOpacity", "_initialThumbBounds", "_animateZoom", "_options$showHideOpac", "bg", "opacity", "overflow", "_setClosedStateZoomPan", "willChange", "decoded", "isDelaying", "_initiate", "_this$pswp$element", "_this$pswp$element2", "setProperty", "_animateToOpenState", "_animateToClosedState", "_onAnimationComplete", "_animateTo", "containerOnePanX", "containerOnePanY", "containerTwoPanX", "containerTwoPanY", "animProps", "defaultOptions", "bgClickAction", "tapAction", "PhotoSwipe", "_prepareOptions", "_prevViewportSize", "isDestroying", "hasMouse", "_initialItemData", "keyboard", "_createMainStructure", "rootClasses", "mainClass", "scrollWheel", "isNaN", "updateSize", "pageYOffset", "_handlePageResize", "_updatePageScrollOffset", "_itemHolder$slide", "goTo", "next", "prev", "_this$currSlide", "_this$currSlide2", "_itemHolder$slide2", "refreshSlideContent", "slideIndex", "_this$currSlide$index", "_this$currSlide3", "potentialHolderIndex", "_itemHolder$slide3", "holder", "matchMedia", "_this$element2", "test", "userAgent", "setScrollOffset", "body"]
}
